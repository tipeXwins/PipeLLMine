11d10
< open System.Text.RegularExpressions
55,66d53
<     let internal userDefinedName (parent : QsQualifiedName option) name =
<         let isReserved =
<             match name with
<             | "Data"
<             | "Deconstruct"
<             | "Info"
<             | "Run" -> true
<             | _ ->
<                 Regex.IsMatch (name, @"^Item\d+$") ||
<                 parent |> Option.exists (fun current' -> name = current'.Name.Value)
<         if isReserved then name + "__" else name
< 
70c57,58
<         name.Namespace.Value.Replace (".", "__") + "__" + name.Name.Value
---
>         let pieces = name.Namespace.Value.Split([|'.'|]) |> String.Concat
>         pieces + name.Name.Value
83,87d70
<     let getOpName context n =
<         if isCurrentOp context n then Directives.Self
<         elif needsFullPath context n then prependNamespaceString n
<         else n.Name.Value + "__"
< 
108,109c91
<         let name = userDefinedName None n.Name.Value
<         if needsFullPath context n then n.Namespace.Value + "." + name else name
---
>         if needsFullPath context n then n.Namespace.Value + "." + n.Name.Value else n.Name.Value
181c163
<             userDefinedName None name.Name.Value
---
>             name.Name.Value
414,423c396,398
<             | LocalVariable name ->
<                 let name' =
<                     match ex.ResolvedType.Resolution with
<                     | UserDefinedType udt ->
<                         name.Value |> userDefinedName (Some { Namespace = udt.Namespace; Name = udt.Name })
<                     | _ -> name.Value
<                 buildExpression ex <|.|> ident name'
<             | _ ->
<                 // TODO: Diagnostics
<                 failwith "Invalid identifier for named item"
---
>             | LocalVariable name -> (buildExpression ex) <|.|> (``ident`` name.Value)
> // TODO: Diagnostics
>             | _ -> failwith "Invalid identifier for named item"
438,439c413,421
<             | LocalVariable n -> n.Value |> ident :> ExpressionSyntax
<             | GlobalCallable n -> getOpName context n |> ident :> ExpressionSyntax
---
>             | LocalVariable n-> n.Value |> ``ident`` :> ExpressionSyntax
>             | GlobalCallable n ->
>                 if isCurrentOp context n then
>                     Directives.Self |> ``ident`` :> ExpressionSyntax
>                 elif needsFullPath context n then
>                     prependNamespaceString n |> ``ident`` :> ExpressionSyntax
>                 else
>                     n.Name.Value |> ``ident`` :> ExpressionSyntax
> // TODO: Diagnostics
441d422
<                 // TODO: Diagnostics
783,784c764,765
<                 | Allocate -> "Allocate__", "Release__"
<                 | Borrow   -> "Borrow__", "Return__"
---
>                 | Allocate -> ("Allocate", "Release")
>                 | Borrow   -> ("Borrow", "Return")
869a851,855
>     let getOpName context n =
>         if needsFullPath context n then prependNamespaceString n
>         else if isCurrentOp context n then Directives.Self
>         else n.Name.Value
> 
873,876c859
<             let opName =
<                 if sameNamespace
<                 then userDefinedName None n.Name.Value
<                 else "global::" + n.Namespace.Value + "." + userDefinedName None n.Name.Value
---
>             let opName = if sameNamespace then n.Name.Value else "global::" + n.Namespace.Value + "." + n.Name.Value
897c880
<                         let factoryGet = (``ident`` "this" <|.|> ``ident`` "__Factory__" <|.|> (generic "Get" ``<<`` [ signature ] ``>>``))
---
>                         let factoryGet = (``ident`` "this" <|.|> ``ident`` "Factory" <|.|> (generic "Get" ``<<`` [ signature ] ``>>``))
902c885
<         ``method`` "void"  "__Init__" ``<<`` [] ``>>``
---
>         ``method`` "void"  "Init" ``<<`` [] ``>>``
999,1000c982,983
<                 | QsAdjoint           -> "__Body__"
<                 | QsControlledAdjoint -> "__ControlledBody__"
---
>                 | QsAdjoint           -> "Body"
>                 | QsControlledAdjoint -> "ControlledBody"
1002c985
<                 | _ -> "__Body__"
---
>                 | _ -> "Body"
1041c1024
<             let bodyName = if bodyName = "Body" then "__Body__" else "__" + bodyName + "Body__"
---
>             let bodyName = if bodyName = "Body" then bodyName else bodyName + "Body"
1293c1276
<             ``arrow_method`` "IApplyData" (sprintf "__Data%s__" name) ``<<`` [] ``>>``
---
>             ``arrow_method`` "IApplyData" (sprintf "__data%s" name) ``<<`` [] ``>>``
1315,1316c1298,1299
<     let findClassName (op: QsCallable)  =
<         let name = userDefinedName None op.FullName.Name.Value
---
>     let findClassName context (op: QsCallable)  =
>         let name = op.FullName.Name.Value
1366c1349
<         let (name, nonGenericName) = findClassName op
---
>         let (name, nonGenericName) = findClassName context op
1444c1427
<         let name = userDefinedName None udt.FullName.Name.Value
---
>         let name = udt.FullName.Name.Value
1472,1476c1455,1456
<                 ``property-arrow_get``
<                     (roslynTypeName context decl.Type)
<                     (userDefinedName context.current decl.VariableName.Value)
<                     [ ``public`` ] ``get`` (``=>`` valueExpr)
<                 :> MemberDeclarationSyntax
---
>                 ``property-arrow_get`` (roslynTypeName context decl.Type) decl.VariableName.Value [ ``public`` ]
>                     ``get`` (``=>`` valueExpr) :> MemberDeclarationSyntax
