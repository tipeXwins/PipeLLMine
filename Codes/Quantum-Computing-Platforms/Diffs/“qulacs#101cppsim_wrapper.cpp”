55c55
<         .def("copy", &PauliOperator::copy, pybind11::return_value_policy::take_ownership)
---
>         .def("copy", &PauliOperator::copy, pybind11::return_value_policy::automatic_reference)
67,70c67
<         //.def("get_term", &GeneralQuantumOperator::get_term, pybind11::return_value_policy::take_ownership)
<         .def("get_term",[](const GeneralQuantumOperator& quantum_operator, const unsigned int index) {
<             return quantum_operator.get_term(index)->copy();
<         }, pybind11::return_value_policy::take_ownership)
---
>         .def("get_term", &GeneralQuantumOperator::get_term, pybind11::return_value_policy::automatic_reference)
76,78c73,75
<     mquantum_operator.def("create_quantum_operator_from_openfermion_file", &quantum_operator::create_general_quantum_operator_from_openfermion_file, pybind11::return_value_policy::take_ownership);
<     mquantum_operator.def("create_quantum_operator_from_openfermion_text", &quantum_operator::create_general_quantum_operator_from_openfermion_text, pybind11::return_value_policy::take_ownership);
<     mquantum_operator.def("create_split_quantum_operator", &quantum_operator::create_split_general_quantum_operator, pybind11::return_value_policy::take_ownership);
---
>     mquantum_operator.def("create_quantum_operator_from_openfermion_file", &quantum_operator::create_general_quantum_operator_from_openfermion_file, pybind11::return_value_policy::automatic_reference);
>     mquantum_operator.def("create_quantum_operator_from_openfermion_text", &quantum_operator::create_general_quantum_operator_from_openfermion_text, pybind11::return_value_policy::automatic_reference);
>     mquantum_operator.def("create_split_quantum_operator", &quantum_operator::create_split_general_quantum_operator, pybind11::return_value_policy::automatic_reference);
88,91c85
<         //.def("get_term", &HermitianQuantumOperator::get_term, pybind11::return_value_policy::take_ownership)
<         .def("get_term",[](const HermitianQuantumOperator& quantum_operator, const unsigned int index) {
<             return quantum_operator.get_term(index)->copy();
<         }, pybind11::return_value_policy::take_ownership)
---
>         .def("get_term", &HermitianQuantumOperator::get_term, pybind11::return_value_policy::automatic_reference)
100,102c94,96
<     mobservable.def("create_observable_from_openfermion_file", &observable::create_observable_from_openfermion_file, pybind11::return_value_policy::take_ownership);
<     mobservable.def("create_observable_from_openfermion_text", &observable::create_observable_from_openfermion_text, pybind11::return_value_policy::take_ownership);
<     mobservable.def("create_split_observable", &observable::create_split_observable, pybind11::return_value_policy::take_ownership);
---
>     mobservable.def("create_observable_from_openfermion_file", &observable::create_observable_from_openfermion_file, pybind11::return_value_policy::automatic_reference);
>     mobservable.def("create_observable_from_openfermion_text", &observable::create_observable_from_openfermion_text, pybind11::return_value_policy::automatic_reference);
>     mobservable.def("create_split_observable", &observable::create_split_observable, pybind11::return_value_policy::automatic_reference);
180c174
<         .def("copy",&QuantumGateBase::copy, pybind11::return_value_policy::take_ownership)
---
>         .def("copy",&QuantumGateBase::copy, pybind11::return_value_policy::automatic_reference)
195c189
<         .def("copy", &QuantumGateMatrix::copy, pybind11::return_value_policy::take_ownership)
---
>         .def("copy", &QuantumGateMatrix::copy, pybind11::return_value_policy::automatic_reference)
207,233c201,227
<     mgate.def("Identity", &gate::Identity, pybind11::return_value_policy::take_ownership);
<     mgate.def("X", &gate::X, pybind11::return_value_policy::take_ownership);
<     mgate.def("Y", &gate::Y, pybind11::return_value_policy::take_ownership);
<     mgate.def("Z", &gate::Z, pybind11::return_value_policy::take_ownership);
<     mgate.def("H", &gate::H, pybind11::return_value_policy::take_ownership);
<     mgate.def("S", &gate::S, pybind11::return_value_policy::take_ownership);
<     mgate.def("Sdag", &gate::Sdag, pybind11::return_value_policy::take_ownership);
<     mgate.def("T", &gate::T, pybind11::return_value_policy::take_ownership);
<     mgate.def("Tdag", &gate::Tdag, pybind11::return_value_policy::take_ownership);
<     mgate.def("sqrtX", &gate::sqrtX, pybind11::return_value_policy::take_ownership);
<     mgate.def("sqrtXdag", &gate::sqrtXdag, pybind11::return_value_policy::take_ownership);
<     mgate.def("sqrtY", &gate::sqrtY, pybind11::return_value_policy::take_ownership);
<     mgate.def("sqrtYdag", &gate::sqrtYdag, pybind11::return_value_policy::take_ownership);
<     mgate.def("P0", &gate::P0, pybind11::return_value_policy::take_ownership);
<     mgate.def("P1", &gate::P1, pybind11::return_value_policy::take_ownership);
< 
<     mgate.def("U1", &gate::U1, pybind11::return_value_policy::take_ownership);
<     mgate.def("U2", &gate::U2, pybind11::return_value_policy::take_ownership);
<     mgate.def("U3", &gate::U3, pybind11::return_value_policy::take_ownership);
< 
<     mgate.def("RX", &gate::RX, pybind11::return_value_policy::take_ownership);
<     mgate.def("RY", &gate::RY, pybind11::return_value_policy::take_ownership);
<     mgate.def("RZ", &gate::RZ, pybind11::return_value_policy::take_ownership);
< 
<     mgate.def("CNOT", &gate::CNOT, pybind11::return_value_policy::take_ownership);
<     mgate.def("CZ", &gate::CZ, pybind11::return_value_policy::take_ownership);
<     mgate.def("SWAP", &gate::SWAP, pybind11::return_value_policy::take_ownership);
---
>     mgate.def("Identity", &gate::Identity, pybind11::return_value_policy::automatic_reference);
>     mgate.def("X", &gate::X, pybind11::return_value_policy::automatic_reference);
>     mgate.def("Y", &gate::Y, pybind11::return_value_policy::automatic_reference);
>     mgate.def("Z", &gate::Z, pybind11::return_value_policy::automatic_reference);
>     mgate.def("H", &gate::H, pybind11::return_value_policy::automatic_reference);
>     mgate.def("S", &gate::S, pybind11::return_value_policy::automatic_reference);
>     mgate.def("Sdag", &gate::Sdag, pybind11::return_value_policy::automatic_reference);
>     mgate.def("T", &gate::T, pybind11::return_value_policy::automatic_reference);
>     mgate.def("Tdag", &gate::Tdag, pybind11::return_value_policy::automatic_reference);
>     mgate.def("sqrtX", &gate::sqrtX, pybind11::return_value_policy::automatic_reference);
>     mgate.def("sqrtXdag", &gate::sqrtXdag, pybind11::return_value_policy::automatic_reference);
>     mgate.def("sqrtY", &gate::sqrtY, pybind11::return_value_policy::automatic_reference);
>     mgate.def("sqrtYdag", &gate::sqrtYdag, pybind11::return_value_policy::automatic_reference);
>     mgate.def("P0", &gate::P0, pybind11::return_value_policy::automatic_reference);
>     mgate.def("P1", &gate::P1, pybind11::return_value_policy::automatic_reference);
> 
>     mgate.def("U1", &gate::U1, pybind11::return_value_policy::automatic_reference);
>     mgate.def("U2", &gate::U2, pybind11::return_value_policy::automatic_reference);
>     mgate.def("U3", &gate::U3, pybind11::return_value_policy::automatic_reference);
> 
>     mgate.def("RX", &gate::RX, pybind11::return_value_policy::automatic_reference);
>     mgate.def("RY", &gate::RY, pybind11::return_value_policy::automatic_reference);
>     mgate.def("RZ", &gate::RZ, pybind11::return_value_policy::automatic_reference);
> 
>     mgate.def("CNOT", &gate::CNOT, pybind11::return_value_policy::automatic_reference);
>     mgate.def("CZ", &gate::CZ, pybind11::return_value_policy::automatic_reference);
>     mgate.def("SWAP", &gate::SWAP, pybind11::return_value_policy::automatic_reference);
235,236c229,230
<     mgate.def("Pauli", &gate::Pauli, pybind11::return_value_policy::take_ownership);
<     mgate.def("PauliRotation", &gate::PauliRotation, pybind11::return_value_policy::take_ownership);
---
>     mgate.def("Pauli", &gate::Pauli, pybind11::return_value_policy::automatic_reference);
>     mgate.def("PauliRotation", &gate::PauliRotation, pybind11::return_value_policy::automatic_reference);
240,241c234,235
<     mgate.def("DenseMatrix", ptr1, pybind11::return_value_policy::take_ownership);
<     mgate.def("DenseMatrix", ptr2, pybind11::return_value_policy::take_ownership);
---
>     mgate.def("DenseMatrix", ptr1, pybind11::return_value_policy::automatic_reference);
>     mgate.def("DenseMatrix", ptr2, pybind11::return_value_policy::automatic_reference);
243c237
< 	mgate.def("RandomUnitary", &gate::RandomUnitary, pybind11::return_value_policy::take_ownership);
---
> 	mgate.def("RandomUnitary", &gate::RandomUnitary, pybind11::return_value_policy::automatic_reference);
252c246
<     mgate.def("merge", ptr3, pybind11::return_value_policy::take_ownership);
---
>     mgate.def("merge", ptr3, pybind11::return_value_policy::automatic_reference);
255c249
<     mgate.def("merge", ptr4, pybind11::return_value_policy::take_ownership);
---
>     mgate.def("merge", ptr4, pybind11::return_value_policy::automatic_reference);
258c252
<     mgate.def("add", ptr5, pybind11::return_value_policy::take_ownership);
---
>     mgate.def("add", ptr5, pybind11::return_value_policy::automatic_reference);
261c255
<     mgate.def("add", ptr6, pybind11::return_value_policy::take_ownership);
---
>     mgate.def("add", ptr6, pybind11::return_value_policy::automatic_reference);
263,267c257,261
<     mgate.def("to_matrix_gate", &gate::to_matrix_gate, pybind11::return_value_policy::take_ownership);
<     mgate.def("Probabilistic", &gate::Probabilistic, pybind11::return_value_policy::take_ownership);
<     mgate.def("CPTP", &gate::CPTP, pybind11::return_value_policy::take_ownership);
<     mgate.def("Instrument", &gate::Instrument, pybind11::return_value_policy::take_ownership);
<     mgate.def("Adaptive", &gate::Adaptive, pybind11::return_value_policy::take_ownership);
---
>     mgate.def("to_matrix_gate", &gate::to_matrix_gate, pybind11::return_value_policy::automatic_reference);
>     mgate.def("Probabilistic", &gate::Probabilistic, pybind11::return_value_policy::automatic_reference);
>     mgate.def("CPTP", &gate::CPTP, pybind11::return_value_policy::automatic_reference);
>     mgate.def("Instrument", &gate::Instrument, pybind11::return_value_policy::automatic_reference);
>     mgate.def("Adaptive", &gate::Adaptive, pybind11::return_value_policy::automatic_reference);
278c272
<         .def("copy", &QuantumCircuit::copy, pybind11::return_value_policy::take_ownership)
---
>         .def("copy", &QuantumCircuit::copy, pybind11::return_value_policy::automatic_reference)
282,283c276,277
<         .def("add_gate", (void (QuantumCircuit::*)(const QuantumGateBase*))&QuantumCircuit::add_gate_copy)
<         .def("add_gate", (void (QuantumCircuit::*)(const QuantumGateBase*, unsigned int))&QuantumCircuit::add_gate_copy)
---
>         .def("add_gate", (void (QuantumCircuit::*)(const QuantumGateBase&))&QuantumCircuit::add_gate_copy)
>         .def("add_gate", (void (QuantumCircuit::*)(const QuantumGateBase&, unsigned int))&QuantumCircuit::add_gate_copy)
292c286
< 	    }, pybind11::return_value_policy::take_ownership)
---
> 	    }, pybind11::return_value_policy::automatic_reference)
340c334
<         .def("copy", &ParametricQuantumCircuit::copy, pybind11::return_value_policy::take_ownership)
---
>         .def("copy", &ParametricQuantumCircuit::copy, pybind11::return_value_policy::automatic_reference)
343,344c337,338
<         .def("add_gate", (void (ParametricQuantumCircuit::*)(const QuantumGateBase* gate))  &ParametricQuantumCircuit::add_gate_copy )
<         .def("add_gate", (void (ParametricQuantumCircuit::*)(const QuantumGateBase* gate, unsigned int))  &ParametricQuantumCircuit::add_gate_copy)
---
>         .def("add_gate", (void (ParametricQuantumCircuit::*)(QuantumGateBase* gate))  &ParametricQuantumCircuit::add_gate )
>         .def("add_gate", (void (ParametricQuantumCircuit::*)(QuantumGateBase* gate, unsigned int))  &ParametricQuantumCircuit::add_gate)
365c359
<         .def("merge_all", &QuantumCircuitOptimizer::merge_all, pybind11::return_value_policy::take_ownership)
---
>         .def("merge_all", &QuantumCircuitOptimizer::merge_all, pybind11::return_value_policy::automatic_reference)
