301,310c301,307
<  // not the nicest solution, but unfortunatly type extensions cannot be used to satisfy member constraints...
< let private TupleItems<'T when 'T :> ITuple> (arg: 'T): 'T list option =
<     let cast a = box >> unbox |> List.map |> Option.map <| a
<     match box arg with
<     | :? QsExpression               as arg -> cast arg.TupleItems
<     | :? TypedExpression            as arg -> cast arg.TupleItems
<     | :? QsType                     as arg -> cast arg.TupleItems
<     | :? ResolvedType               as arg -> cast arg.TupleItems
<     | :? QsInitializer              as arg -> cast arg.TupleItems
<     | :? ResolvedInitializer        as arg -> cast arg.TupleItems
---
> let private TupleItems<'I> (arg : ITuple) = arg |> function  // not the nicest solution, but unfortunatly type extensions cannot be used to satisfy member constraints...
>     | :? QsExpression               as arg -> arg.TupleItems |> Option.map (List.map box)
>     | :? TypedExpression            as arg -> arg.TupleItems |> Option.map (List.map box)
>     | :? QsType                     as arg -> arg.TupleItems |> Option.map (List.map box)
>     | :? ResolvedType               as arg -> arg.TupleItems |> Option.map (List.map box)
>     | :? QsInitializer              as arg -> arg.TupleItems |> Option.map (List.map box)
>     | :? ResolvedInitializer        as arg -> arg.TupleItems |> Option.map (List.map box)
312,313c309,310
<     //| :? QsSymbol                   as arg -> arg.TupleItems |> Option.map (List.map box)
<     | :? SymbolTuple                as arg -> cast arg.TupleItems
---
>     //| :? QsSymbol                   as arg -> arg.TupleItems |> Option.map (List.map box) 
>     | :? SymbolTuple                as arg -> arg.TupleItems |> Option.map (List.map box)
318c315
<     | Some [item] -> Some item
---
>     | Some [item] -> Some (item |> unbox)
322,323c319,321
<     match TupleItems arg with
<     | Some items when items.Length > 1 -> Some items
---
>     match TupleItems arg with 
>     | Some [] | Some [_] -> None
>     | Some items when items.Length > 1 -> Some (items |> List.map unbox)
349c347
<     
---
>     
\ No newline at end of file
