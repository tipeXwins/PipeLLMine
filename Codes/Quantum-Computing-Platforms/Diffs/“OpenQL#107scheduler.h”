688c688
<     void ScheduleASAP( ListDigraph::NodeMap<size_t> & cycle, std::vector<ListDigraph::Node> & order,
---
>     void ScheduleALAP( ListDigraph::NodeMap<size_t> & cycle, std::vector<ListDigraph::Node> & order,
691c691
<         if(verbose) COUT("Performing RC ASAP Scheduling");
---
>         if(verbose) COUT("Performing RC ALAP Scheduling");
694,696c694,696
<         std::vector<ListDigraph::Node>::reverse_iterator currNode = order.rbegin();
<         size_t currCycle=0;
<         cycle[*currNode]=currCycle; // source node
---
>         std::vector<ListDigraph::Node>::iterator currNode = order.begin();
>         size_t currCycle=MAX_CYCLE;
>         cycle[*currNode]=currCycle;
698c698
<         while(currNode != order.rend() )
---
>         while(currNode != order.end() )
706c706
<             std::string instruction_type; // single / two qubit
---
>             std::string instruction_type; // sing/two qubit
720,727c720,725
<             size_t operation_duration = std::ceil( static_cast<float>(curr_ins->duration) / cycle_time);
<             size_t op_start_cycle=0;
<             DOUT("Scheduling " << name[*currNode]);
<             for( ListDigraph::InArcIt arc(graph,*currNode); arc != INVALID; ++arc )
<             {
<                 ListDigraph::Node srcNode  = graph.source(arc);
<                 size_t srcCycle = cycle[srcNode];
<                 if(op_start_cycle < (srcCycle + weight[arc]))
---
>             size_t operation_cycles = std::ceil( static_cast<float>(curr_ins->duration) / cycle_time);
>             for( ListDigraph::OutArcIt arc(graph,*currNode); arc != INVALID; ++arc )
>             {
>                 ListDigraph::Node targetNode  = graph.target(arc);
>                 size_t targetCycle = cycle[targetNode];
>                 if( currCycle > (targetCycle - weight[arc]) )
729c727
<                     op_start_cycle = srcCycle + weight[arc];
---
>                     currCycle = targetCycle - weight[arc];
733c731
<             while(op_start_cycle < MAX_CYCLE)
---
>             while(currCycle > 0)
735,737c733,734
<                 DOUT("Trying to schedule: " << name[*currNode] << "  in cycle: " << op_start_cycle);
<                 DOUT("current operation_duration: " << operation_duration);
<                 if( rm.available(op_start_cycle, curr_ins, operation_name, operation_type, instruction_type, operation_duration) )
---
>                 DOUT("Trying to schedule: " << name[*currNode] << "  in cycle: " << currCycle);
>                 if( rm.available(currCycle, curr_ins, operation_name, operation_type, instruction_type, operation_cycles) )
741,742c738,739
<                     rm.reserve(op_start_cycle, curr_ins, operation_name, operation_type, instruction_type, operation_duration);
<                     cycle[*currNode]=op_start_cycle;
---
>                     rm.reserve(currCycle, curr_ins, operation_name, operation_type, instruction_type, operation_cycles);
>                     cycle[*currNode]=currCycle;
748c745
<                     ++op_start_cycle;
---
>                     --currCycle; // TODO --operation_cycles
751c748
<             if(op_start_cycle >= MAX_CYCLE)
---
>             if(currCycle <= 0)
797c794
<         if(verbose) COUT("Performing RC ASAP Scheduling [Done].");
---
>         if(verbose) COUT("Performing RC ALAP Scheduling [Done].");
1055c1052
<     Bundles GetBundlesScheduleASAP( ql::arch::resource_manager_t & rm, ql::quantum_platform & platform, bool verbose=false )
---
>     Bundles GetBundlesScheduleALAP( ql::arch::resource_manager_t & rm, ql::quantum_platform & platform, bool verbose=false )
1057c1054
<         if(verbose) COUT("RC Scheduling ASAP to get bundles ...");
---
>         if(verbose) COUT("RC Scheduling ALAP to get bundles ...");
1061c1058
<         ScheduleASAP(cycle, order, rm, platform, verbose);
---
>         ScheduleALAP(cycle, order, rm, platform, verbose);
1073c1070
<                 insInAllCycles[ cycle[*it] ].push_back( instruction[*it] );
---
>                 insInAllCycles[ MAX_CYCLE - cycle[*it] ].push_back( instruction[*it] );
1080c1077
<             TotalCycles =  cycle[ *( order.begin() ) ];
---
>             TotalCycles =  MAX_CYCLE - cycle[ *( order.rbegin() ) ];
1083c1080
<         for(size_t currCycle = 0; currCycle<=TotalCycles; ++currCycle)
---
>         for(int currCycle = TotalCycles; currCycle>=0; --currCycle)
1100c1097
<                 abundle.start_cycle = currCycle;
---
>                 abundle.start_cycle = TotalCycles - currCycle;
1144c1141
<         if(verbose) COUT("RC Scheduling ASAP to get bundles [DONE]");
---
>         if(verbose) COUT("RC Scheduling ALAP to get bundles [DONE]");
