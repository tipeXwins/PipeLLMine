790,791c790,792
<             let deallocationFlagName = nextArgName()
<             let deallocationFlagIdentifier = ``ident`` deallocationFlagName
---
>             let exDispatchInfoName = nextArgName() 
>             let exDispatchInfoHandle = ``ident`` exDispatchInfoName
>             let caughtEx = nextArgName()
802c803
<             let deallocationFlagDeclaration = ``typed var`` "bool" deallocationFlagName (``:=`` ``true`` |> Some) |> ``#line hidden`` :> StatementSyntax
---
>             let exceptionHandle = ``typed var`` "System.Runtime.ExceptionServices.ExceptionDispatchInfo" exDispatchInfoName (``:=`` ``null`` |> Some) |> ``#line hidden`` :> StatementSyntax
805,807c806,812
<                 let setFlagToFalse = deallocationFlagIdentifier <-- ``false`` |> statement
<                 ``catch`` None [setFlagToFalse; ``throw`` None] // use standard mechanism to rethrow the exception by using "throw;"
<             let finallyBlock = [``if`` ``(`` deallocationFlagIdentifier ``)`` deallocation None]
---
>                 let setEx = exDispatchInfoHandle <-- ``invoke`` (``ident`` "System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture") ``(`` [``ident`` caughtEx] ``)`` |> statement
>                 ``catch`` (Some ("Exception", caughtEx)) [setEx; ``throw`` None] // use standard mechanism to rethrow the exception by using "throw;"
>             let finallyBlock = 
>                 let condition = exDispatchInfoHandle .!=. ``null``
>                 let rethrow = ``invoke`` (exDispatchInfoHandle <|.|> (``ident`` "Throw")) ``(`` [] ``)`` |> statement // rethrow that keeps the call stack unchanged
>                 let throwIfNecessary = ``if`` ``(`` condition ``)`` [rethrow] None 
>                 throwIfNecessary :: deallocation
809c814
<             let statements = [allocation; deallocationFlagDeclaration; body]
---
>             let statements = [allocation; exceptionHandle; body]
