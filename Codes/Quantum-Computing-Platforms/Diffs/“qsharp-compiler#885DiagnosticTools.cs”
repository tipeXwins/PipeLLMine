40,41c40,41
<             Lsp.Position CopyPosition(Lsp.Position position) =>
<                 new Lsp.Position(position.Line, position.Character);
---
>             Lsp.Position? CopyPosition(Lsp.Position? position) =>
>                 position is null ? null : new Lsp.Position(position.Line, position.Character);
43,48c43,50
<             Lsp.Range CopyRange(Lsp.Range range) =>
<                 new Lsp.Range
<                 {
<                     Start = CopyPosition(range.Start),
<                     End = CopyPosition(range.End)
<                 };
---
>             Lsp.Range? CopyRange(Lsp.Range? range) =>
>                 range is null
>                     ? null
>                     : new Lsp.Range
>                     {
>                         Start = CopyPosition(range.Start),
>                         End = CopyPosition(range.End)
>                     };
50,57d51
<             // NB: The nullability metadata on Diagnostic.Range is incorrect,
<             //     such that some Diagnostic values may have nullable ranges.
<             //     We cannot assign that to a new Diagnostic without
<             //     contradicting nullability metadata, however, so we need to
<             //     explicitly disable nullable references for the following
<             //     statement. Once the upstream bug in the LSP client package
<             //     is fixed, we can remove the nullable disable here.
<             #nullable disable
62c56
<                     Range = message.Range == null ? null : CopyRange(message.Range),
---
>                     Range = CopyRange(message.Range),
68d61
<             #nullable restore
80,82c73,75
<             // NB: Despite the nullability metadata, Range may be null here.
<             //     We thus need to guard accordingly.
<             if (copy.Range != null)
---
>             copy.Range.Start.Line += offset;
>             copy.Range.End.Line += offset;
>             if (copy.Range.Start.Line < 0 || copy.Range.End.Line < 0)
84,90c77,78
<                 copy.Range.Start.Line += offset;
<                 copy.Range.End.Line += offset;
<                 if (copy.Range.Start.Line < 0 || copy.Range.End.Line < 0)
<                 {
<                     throw new ArgumentOutOfRangeException(
<                         nameof(offset), "Translated diagnostic has negative line numbers.");
<                 }
---
>                 throw new ArgumentOutOfRangeException(
>                     nameof(offset), "Translated diagnostic has negative line numbers.");
