def topological_ordering(nodes): ordered_nodes = [node for node in nodes if not node.incoming_nodes] for node in ordered_nodes: for nextnode in node.outgoing_nodes: if nextnode not in ordered_nodes: ordered_nodes.append(nextnode) return ordered_nodesdef topological_ordering(nodes): ordered_nodes = [node for node in nodes if not node.incoming_nodes] for node in ordered_nodes: for nextnode in node.outgoing_nodes: if nextnode in ordered_nodes: ordered_nodes.append(nextnode) return ordered_nodesdef topological_ordering(nodes): ordered_nodes = [node for node in nodes if not node.incoming_nodes] for node in ordered_nodes: for nextnode in node.outgoing_nodes: if not nextnode.incoming_nodes: ordered_nodes.append(nextnode) return ordered_nodesdef topological_ordering(nodes): ordered_nodes = [node for node in nodes if not node.incoming_nodes] for node in ordered_nodes: for nextnode in node.outgoing_nodes: if nextnode.incoming_nodes: ordered_nodes.append(nextnode) else: ordered_nodes.append(nextnode) return ordered_nodesdef topological_ordering(nodes): ordered_nodes = [node for node in nodes if not node.incoming_nodes] for node in ordered_nodes: for nextnode in node.outgoing_nodes: if not nextnode in ordered_nodes: ordered_nodes.append(nextnode) return ordered_nodesdef topological_ordering(nodes): ordered_nodes = [node for node in nodes if not node.incoming_nodes] for node in ordered_nodes: for nextnode in node.outgoing_nodes: if nextnode in ordered_nodes: ordered_nodes.append(nextnode) else: ordered_nodes.append(nextnode) return ordered_nodesdef topological_ordering(nodes): ordered_nodes = [node for node in nodes if not node.incoming_nodes] for node in ordered_nodes: for nextnode in node.outgoing_nodes: if nextnode == node: ordered_nodes.append(nextnode) return ordered_nodesdef topological_ordering(nodes): ordered_nodes = [node for node in nodes if not node.incoming_nodes] for node in ordered_nodes: for nextnode in node.outgoing_nodes: if nextnode.incoming_nodes: ordered_nodes.append(nextnode) return ordered_nodesdef topological_ordering(nodes): ordered_nodes = [node for node in nodes if not node.incoming_nodes] for node in ordered_nodes: for nextnode in node.outgoing_nodes: if not nextnode.incoming_nodes: continue ordered_nodes.append(nextnode) return ordered_nodesdef topological_ordering(nodes): ordered_nodes = [node for node in nodes if not node.incoming_nodes] for node in ordered_nodes: for nextnode in node.outgoing_nodes: if nextnode.incoming_nodes and nextnode.incoming_nodes: ordered_nodes.append(nextnode) return ordered_nodes