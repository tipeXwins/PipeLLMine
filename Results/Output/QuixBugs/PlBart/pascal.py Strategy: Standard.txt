def pascal(n): rows = [[1]] for r in range(1, n): row = [] for c in range(1, n): upleft = rows[r - 1][c - 1] if c > 0 else 0 upright = rows[r - 1][c] if c < r else 0 row.append(upleft + upright) rows.append(row) return rowsdef pascal(n): rows = [[1]] for r in range(1, n): row = [] for c in range(0, n): upleft = rows[r - 1][c - 1] if c > 0 else 0 upright = rows[r - 1][c] if c < r else 0 row.append(upleft + upright) rows.append(row) return rowsdef pascal(n): rows = [[1]] for r in range(1, n): row = [] for c in range(2, n): upleft = rows[r - 1][c - 1] if c > 0 else 0 upright = rows[r - 1][c] if c < r else 0 row.append(upleft + upright) rows.append(row) return rowsdef pascal(n): rows = [[1]] for r in range(1, n): row = [] for c in range(len(rows)): upleft = rows[r - 1][c - 1] if c > 0 else 0 upright = rows[r - 1][c] if c < r else 0 row.append(upleft + upright) rows.append(row) return rowsdef pascal(n): rows = [[1]] for r in range(1, n): row = [] for c in range(n): upleft = rows[r - 1][c - 1] if c > 0 else 0 upright = rows[r - 1][c] if c < r else 0 row.append(upleft + upright) rows.append(row) return rowsdef pascal(n): rows = [[1]] for r in range(1, n): row = [] for c in range(1, n-1): upleft = rows[r - 1][c - 1] if c > 0 else 0 upright = rows[r - 1][c] if c < r else 0 row.append(upleft + upright) rows.append(row) return rowsdef pascal(n): rows = [[1]] for r in range(1, n): row = [] for c in range(r, n): upleft = rows[r - 1][c - 1] if c > 0 else 0 upright = rows[r - 1][c] if c < r else 0 row.append(upleft + upright) rows.append(row) return rowsdef pascal(n): rows = [[1]] for r in range(1, n): row = [] for c in range(1, len(rows)): upleft = rows[r - 1][c - 1] if c > 0 else 0 upright = rows[r - 1][c] if c < r else 0 row.append(upleft + upright) rows.append(row) return rowsdef pascal(n): rows = [[1]] for r in range(1, n): row = [] for c in range(0, len(rows)): upleft = rows[r - 1][c - 1] if c > 0 else 0 upright = rows[r - 1][c] if c < r else 0 row.append(upleft + upright) rows.append(row) return rowsdef pascal(n): rows = [[1]] for r in range(1, n): row = [] for c in range(1, n): upleft = rows[r - 1][c - 1] if c > 0 else 0 upright = rows[r - 1][c] if c < r else 0 row.append(upleft + upright) rows.append(row) return rows DEDENT