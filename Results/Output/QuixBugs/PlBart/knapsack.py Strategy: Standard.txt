def knapsack(capacity, items): from collections import defaultdict memo = defaultdict(int) for i in range(1, len(items) + 1): weight, value = items[i - 1] for j in range(1, capacity + 1): memo[i, j] = memo[i - 1, j] for j in range(1, capacity + 1): memo[i, j] = max( memo[i, j], value + memo[i - 1, j - weight] ) return memo[len(items), capacity]def knapsack(capacity, items): from collections import defaultdict memo = defaultdict(int) for i in range(1, len(items) + 1): weight, value = items[i - 1] for j in range(1, capacity + 1): memo[i, j] = memo[i - 1, j] + weight memo[i, j] = max( memo[i, j], value + memo[i - 1, j - weight] ) return memo[len(items), capacity]def knapsack(capacity, items): from collections import defaultdict memo = defaultdict(int) for i in range(1, len(items) + 1): weight, value = items[i - 1] for j in range(1, capacity + 1): memo[i, j] = memo[i - 1, j] for k in range(1, capacity + 1): memo[i, j] = max( memo[i, j], value + memo[i - 1, j - weight] ) return memo[len(items), capacity]def knapsack(capacity, items): from collections import defaultdict memo = defaultdict(int) for i in range(1, len(items) + 1): weight, value = items[i - 1] for j in range(1, capacity + 1): memo[i, j] = memo[i - 1, j] + weight * value memo[i, j] = max( memo[i, j], value + memo[i - 1, j - weight] ) return memo[len(items), capacity]def knapsack(capacity, items): from collections import defaultdict memo = defaultdict(int) for i in range(1, len(items) + 1): weight, value = items[i - 1] for j in range(1, capacity + 1): memo[i, j] = memo[i - 1, j] * weight + memo[i - 1, j - weight] memo[i, j] = max( memo[i, j], value + memo[i - 1, j - weight] ) return memo[len(items), capacity]def knapsack(capacity, items): from collections import defaultdict memo = defaultdict(int) for i in range(1, len(items) + 1): weight, value = items[i - 1] for j in range(1, capacity + 1): memo[i, j] = memo[i - 1, j] for j in range(1, capacity + 1): memo[i, j] = max( memo[i, j], value + memo[i - 1, j - weight] ) return memo[len(items)], capacity]def knapsack(capacity, items): from collections import defaultdict memo = defaultdict(int) for i in range(1, len(items) + 1): weight, value = items[i - 1] for j in range(1, capacity + 1): memo[i, j] = memo[i - 1, j] for k in range(1, capacity + 1): memo[i, j] = max( memo[i, j], value + memo[i - 1, j - weight] ) return memo[len(items)], capacity]def knapsack(capacity, items): from collections import defaultdict memo = defaultdict(int) for i in range(1, len(items) + 1): weight, value = items[i - 1] for j in range(1, capacity + 1): memo[i, j] = memo[i - 1, j] for j in range(1, capacity + 1): memo[i, j] = max( memo[i, j], value + memo[i - 1, j - weight] ) return memo[len(items), capacity ]def knapsack(capacity, items): from collections import defaultdict memo = defaultdict(int) for i in range(1, len(items) + 1): weight, value = items[i - 1] for j in range(1, capacity + 1): memo[i, j] = memo[i - 1, j] for j in range(1, capacity + 1): memo[i, j] = max( memo[i, j], value + memo[i - 1, j - weight] ) return memo[len(items), capacity] DEDENTdef knapsack(capacity, items): from collections import defaultdict memo = defaultdict(int) for i in range(1, len(items) + 1): weight, value = items[i - 1] for j in range(1, capacity + 1): memo[i, j] = memo[i - 1, j] for j in range(1, capacity + 1): memo[i, j] = max( memo[i, j], value + memo[i - 1, j - weight] ) return memo[len(items), capacity] }