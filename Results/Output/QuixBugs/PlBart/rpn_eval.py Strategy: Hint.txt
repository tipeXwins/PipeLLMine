def rpn_eval(tokens): def op(symbol, a, b): return { '+': lambda a, b: a + b, '-': lambda a, b: a - b, '*': lambda a, b: a * b, '/': lambda a, b: a / b }[symbol](a, b) stack = [] for token in tokens: if isinstance(token, float): stack.append(token) else: a = stack.pop() b = stack.pop() stack.append( #buggy line: op(token, a, b) if isinstance(token, int): stack.append( token ) return stack.pop()def rpn_eval(tokens): def op(symbol, a, b): return { '+': lambda a, b: a + b, '-': lambda a, b: a - b, '*': lambda a, b: a * b, '/': lambda a, b: a / b }[symbol](a, b) stack = [] for token in tokens: if isinstance(token, float): stack.append(token) else: a = stack.pop() b = stack.pop() stack.append( #buggy line: op(token, a, b) ) else: op(token, a, b ) return stack.pop()def rpn_eval(tokens): def op(symbol, a, b): return { '+': lambda a, b: a + b, '-': lambda a, b: a - b, '*': lambda a, b: a * b, '/': lambda a, b: a / b }[symbol](a, b) stack = [] for token in tokens: if isinstance(token, float): stack.append(token) else: a = stack.pop() b = stack.pop() stack.append( #buggy line: op(token, a, b) ) else: op( token, a, b ) return stack.pop()def rpn_eval(tokens): def op(symbol, a, b): return { '+': lambda a, b: a + b, '-': lambda a, b: a - b, '*': lambda a, b: a * b, '/': lambda a, b: a / b }[symbol](a, b) stack = [] for token in tokens: if isinstance(token, float): stack.append(token) else: a = stack.pop() b = stack.pop() stack.append( #buggy line: op(token, a, b) ) else: stack.append( #buggy line: op(token, a, b) ) return stack.pop()def rpn_eval(tokens): def op(symbol, a, b): return { '+': lambda a, b: a + b, '-': lambda a, b: a - b, '*': lambda a, b: a * b, '/': lambda a, b: a / b }[symbol](a, b) stack = [] for token in tokens: if isinstance(token, float): stack.append(token) else: a = stack.pop() b = stack.pop() stack.append( #buggy line: op(token, a, b) ) if isinstance(token, int): stack.append( token ) return stack.pop()def rpn_eval(tokens): def op(symbol, a, b): return { '+': lambda a, b: a + b, '-': lambda a, b: a - b, '*': lambda a, b: a * b, '/': lambda a, b: a / b }[symbol](a, b) stack = [] for token in tokens: if isinstance(token, float): stack.append(token) else: a = stack.pop() b = stack.pop() stack.append( #buggy line: op(token, a, b) ) stack.append( #buggy line: op(token, a, b) ) return stack.pop()def rpn_eval(tokens): def op(symbol, a, b): return { '+': lambda a, b: a + b, '-': lambda a, b: a - b, '*': lambda a, b: a * b, '/': lambda a, b: a / b }[symbol](a, b) stack = [] for token in tokens: if isinstance(token, float): stack.append(token) else: a = stack.pop() b = stack.pop() stack.append( #buggy line: op(token, a, b) if isinstance(token, int): stack.append( token ) else: stack.append( token ) return stack.pop()def rpn_eval(tokens): def op(symbol, a, b): return { '+': lambda a, b: a + b, '-': lambda a, b: a - b, '*': lambda a, b: a * b, '/': lambda a, b: a / b }[symbol](a, b) stack = [] for token in tokens: if isinstance(token, float): stack.append(token) else: a = stack.pop() b = stack.pop() stack.append( #buggy line: op(token, a, b) ) else: stack.append( #buggy line: op(token, a, b ) ) return stack.pop()def rpn_eval(tokens): def op(symbol, a, b): return { '+': lambda a, b: a + b, '-': lambda a, b: a - b, '*': lambda a, b: a * b, '/': lambda a, b: a / b }[symbol](a, b) stack = [] for token in tokens: if isinstance(token, float): stack.append(token) else: a = stack.pop() b = stack.pop() stack.append( #buggy line: op(token, a, b) ) stack.append( #buggy line: op(token, a, b ) ) return stack.pop()def rpn_eval(tokens): def op(symbol, a, b): return { '+': lambda a, b: a + b, '-': lambda a, b: a - b, '*': lambda a, b: a * b, '/': lambda a, b: a / b }[symbol](a, b) stack = [] for token in tokens: if isinstance(token, float): stack.append(token) else: a = stack.pop() b = stack.pop() stack.append( #buggy line: op(token, a, b) if isinstance(token, float): stack.append( token ) else: stack.append( token ) return stack.pop()