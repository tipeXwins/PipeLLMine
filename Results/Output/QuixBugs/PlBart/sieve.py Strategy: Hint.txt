def sieve(max): primes = [] for n in range(2, max + 1): #buggy line: if any(n % p > 0 for p in primes): primes.append(n) else: primes.append(n) return primesdef sieve(max): primes = [] for n in range(2, max + 1): #buggy line: if any(n % p > 0 for p in primes): primes.append(n) if any(n % p == 0 for p in primes): primes.append(n) return primesdef sieve(max): primes = [] for n in range(2, max + 1): #buggy line: if any(n % p > 0 for p in primes): primes.append(n) if any(n % p < 0 for p in primes): primes.append(n) return primesdef sieve(max): primes = [] for n in range(2, max + 1): #buggy line: if any(n % p > 0 for p in primes): primes.append(n % p) else: primes.append(n) return primesdef sieve(max): primes = [] for n in range(2, max + 1): #buggy line: if any(n % p > 0 for p in primes): primes.append(p) else: primes.append(n) return primesdef sieve(max): primes = [] for n in range(2, max + 1): #buggy line: if any(n % p > 0 for p in primes): primes.append(n) elif any(n % p == 0 for p in primes): primes.append(n) return primesdef sieve(max): primes = [] for n in range(2, max + 1): #buggy line: if any(n % p > 0 for p in primes): primes.append(n) elif any(n % p < 0 for p in primes): primes.append(n) return primesdef sieve(max): primes = [] for n in range(2, max + 1): #buggy line: if any(n % p > 0 for p in primes): return primes primes.append(n) return primesdef sieve(max): primes = [] for n in range(2, max + 1): #buggy line: if any(n % p > 0 for p in primes): primes.append(p) if any(n % p == 0 for p in primes): primes.append(n) return primesdef sieve(max): primes = [] for n in range(2, max + 1): #buggy line: if any(n % p > 0 for p in primes): primes.append(n) else: primes.append(n) primes.append(n) return primes