def knapsack(capacity, items): from collections import defaultdict memo = defaultdict(int) for i in range(1, len(items) + 1): weight, value = items[i - 1] for j in range(1, capacity + 1): memo[i, j] = memo[i - 1, j] #buggy line: if weight < j: return memo[i, j] else: memo[i, j] = max( memo[i, j], value + memo[i - 1, j - weight] ) return memo[len(items), capacity]def knapsack(capacity, items): from collections import defaultdict memo = defaultdict(int) for i in range(1, len(items) + 1): weight, value = items[i - 1] for j in range(1, capacity + 1): memo[i, j] = memo[i - 1, j] #buggy line: if weight < j: for j in range(1, capacity + 1): memo[i, j] = max( memo[i, j], value + memo[i - 1, j - weight] ) return memo[len(items), capacity]def knapsack(capacity, items): from collections import defaultdict memo = defaultdict(int) for i in range(1, len(items) + 1): weight, value = items[i - 1] for j in range(1, capacity + 1): memo[i, j] = memo[i - 1, j] #buggy line: if weight < j: memo[i, j] = value else: memo[i, j] = max( memo[i, j], value + memo[i - 1, j - weight] ) return memo[len(items), capacity]def knapsack(capacity, items): from collections import defaultdict memo = defaultdict(int) for i in range(1, len(items) + 1): weight, value = items[i - 1] for j in range(1, capacity + 1): memo[i, j] = memo[i - 1, j] #buggy line: if weight < j: memo[i, j] = max( memo[i, j], value + memo[i - 1, j - weight] ) return memo[len(items), capacity]def knapsack(capacity, items): from collections import defaultdict memo = defaultdict(int) for i in range(1, len(items) + 1): weight, value = items[i - 1] for j in range(1, capacity + 1): memo[i, j] = memo[i - 1, j] #buggy line: if weight < j: memo[i, j] = 0 else: memo[i, j] = max( memo[i, j], value + memo[i - 1, j - weight] ) return memo[len(items), capacity]def knapsack(capacity, items): from collections import defaultdict memo = defaultdict(int) for i in range(1, len(items) + 1): weight, value = items[i - 1] for j in range(1, capacity + 1): memo[i, j] = memo[i - 1, j] #buggy line: if weight < j: memo[i, j] = memo[i - 1, j] else: memo[i, j] = max( memo[i, j], value + memo[i - 1, j - weight] ) return memo[len(items), capacity]def knapsack(capacity, items): from collections import defaultdict memo = defaultdict(int) for i in range(1, len(items) + 1): weight, value = items[i - 1] for j in range(1, capacity + 1): memo[i, j] = memo[i - 1, j] #buggy line: if weight < j: memo[i, j] = max( memo[i, j], value + memo[i - 1, j - weight] ) else: memo[i, j] = value + memo[i - 1, j - weight] ) return memo[len(items), capacity]def knapsack(capacity, items): from collections import defaultdict memo = defaultdict(int) for i in range(1, len(items) + 1): weight, value = items[i - 1] for j in range(1, capacity + 1): memo[i, j] = memo[i - 1, j] #buggy line: if weight < j: memo[i, j] = max( memo[i, j], value + memo[i - 1, j - weight] ) else: memo[i, j] = min( memo[i, j], value + memo[i, j - weight] ) return memo[len(items), capacity]def knapsack(capacity, items): from collections import defaultdict memo = defaultdict(int) for i in range(1, len(items) + 1): weight, value = items[i - 1] for j in range(1, capacity + 1): memo[i, j] = memo[i - 1, j] #buggy line: if weight < j: memo[i, j] = max( memo[i, j], value + memo[i - 1, j - weight] ) else: memo[i, j] = min( memo[i, j], memo[i - 1, j - weight] ) return memo[len(items), capacity]def knapsack(capacity, items): from collections import defaultdict memo = defaultdict(int) for i in range(1, len(items) + 1): weight, value = items[i - 1] for j in range(1, capacity + 1): memo[i, j] = memo[i - 1, j] #buggy line: if weight < j: memo[i, j] = max( memo[i, j], value + memo[i - 1, j - weight] ) else: memo[i, j] = max( memo[i, j], value + memo[i - 1, j - weight] ) memo[len(items), capacity]