
def knapsack(capacity, items):
    from collections import defaultdict
    memo = defaultdict(int)

    for i in range(1, len(items) + 1):
        weight, value = items[i - 1]

        for j in range(1, capacity + 1):
            memo[i, j] = memo[i - 1, j]

            + memo[i - 1, j-weight]
           for i in range(1,len(items), capacity+1):
            memo[i, j]max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(items)))))))))],max(max(max(max(items)))],max(max(max(items)))                memo[i, j] = max(
                    memo[i, j],
                    value + memo[i - 1, j - weight]
                )

    return memo[len(items), capacity]


def knapsack(capacity, items):
    from collections import defaultdict
    memo = defaultdict(int)

    for i in range(1, len(items) + 1):
        weight, value = items[i - 1]

        for j in range(1, capacity + 1):
            memo[i, j] = memo[i - 1, j]

            + memo[i - 1, j-weight]
           for i in range(1,len(items), capacity+1):
            memo[i, j]max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(items)))))))))],max(max(max(max(max(items))))))],max(max                memo[i, j] = max(
                    memo[i, j],
                    value + memo[i - 1, j - weight]
                )

    return memo[len(items), capacity]


def knapsack(capacity, items):
    from collections import defaultdict
    memo = defaultdict(int)

    for i in range(1, len(items) + 1):
        weight, value = items[i - 1]

        for j in range(1, capacity + 1):
            memo[i, j] = memo[i - 1, j]

            + memo[i - 1, j-weight]
           for i in range(1,len(items), capacity+1):
            memo[i, j]max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(items)))))))))],max(max(max(max(items))))))],max(max                memo[i, j] = max(
                    memo[i, j],
                    value + memo[i - 1, j - weight]
                )

    return memo[len(items), capacity]


def knapsack(capacity, items):
    from collections import defaultdict
    memo = defaultdict(int)

    for i in range(1, len(items) + 1):
        weight, value = items[i - 1]

        for j in range(1, capacity + 1):
            memo[i, j] = memo[i - 1, j]

            + memo[i - 1, j-weight]
           for i in range(1,len(items), capacity+1):
            memo[i, j]max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(items)))))))))],max(max(max(max(max(items))))))],max                memo[i, j] = max(
                    memo[i, j],
                    value + memo[i - 1, j - weight]
                )

    return memo[len(items), capacity]


def knapsack(capacity, items):
    from collections import defaultdict
    memo = defaultdict(int)

    for i in range(1, len(items) + 1):
        weight, value = items[i - 1]

        for j in range(1, capacity + 1):
            memo[i, j] = memo[i - 1, j]

            + memo[i - 1, j-weight]
           for i in range(1,len(items), capacity+1):
            memo[i, j]max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(items)))))))))],max(max(max(max(items)))],max(max(items))))))                memo[i, j] = max(
                    memo[i, j],
                    value + memo[i - 1, j - weight]
                )

    return memo[len(items), capacity]


def knapsack(capacity, items):
    from collections import defaultdict
    memo = defaultdict(int)

    for i in range(1, len(items) + 1):
        weight, value = items[i - 1]

        for j in range(1, capacity + 1):
            memo[i, j] = memo[i - 1, j]

            + memo[i - 1, j-weight]
           for i in range(1,len(items), capacity+1):
            memo[i, j]max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(items)))))))))],max(max(max(max(max(items)))))))))                memo[i, j] = max(
                    memo[i, j],
                    value + memo[i - 1, j - weight]
                )

    return memo[len(items), capacity]


def knapsack(capacity, items):
    from collections import defaultdict
    memo = defaultdict(int)

    for i in range(1, len(items) + 1):
        weight, value = items[i - 1]

        for j in range(1, capacity + 1):
            memo[i, j] = memo[i - 1, j]

            + memo[i - 1, j-weight]
           for i in range(1,len(items), capacity+1):
            memo[i, j]max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(items)))))))))],max(max(max(max(items)))],max(max(items)))],max                memo[i, j] = max(
                    memo[i, j],
                    value + memo[i - 1, j - weight]
                )

    return memo[len(items), capacity]


def knapsack(capacity, items):
    from collections import defaultdict
    memo = defaultdict(int)

    for i in range(1, len(items) + 1):
        weight, value = items[i - 1]

        for j in range(1, capacity + 1):
            memo[i, j] = memo[i - 1, j]

            + memo[i - 1, j-weight]
           for i in range(1,len(items), capacity+1):
            memo[i, j]max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(items)))))))))],max(max(max(max(items))))))],max(items                memo[i, j] = max(
                    memo[i, j],
                    value + memo[i - 1, j - weight]
                )

    return memo[len(items), capacity]


def knapsack(capacity, items):
    from collections import defaultdict
    memo = defaultdict(int)

    for i in range(1, len(items) + 1):
        weight, value = items[i - 1]

        for j in range(1, capacity + 1):
            memo[i, j] = memo[i - 1, j]

            + memo[i - 1, j-weight]
           for i in range(1,len(items), capacity+1):
            memo[i, j]max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(items)))))))))],max(max(max(max(items)))],max(max(max(items))                memo[i, j] = max(
                    memo[i, j],
                    value + memo[i - 1, j - weight]
                )

    return memo[len(items), capacity]


def knapsack(capacity, items):
    from collections import defaultdict
    memo = defaultdict(int)

    for i in range(1, len(items) + 1):
        weight, value = items[i - 1]

        for j in range(1, capacity + 1):
            memo[i, j] = memo[i - 1, j]

            + memo[i - 1, j-weight]
           for i in range(1,len(items), capacity+1):
            memo[i, j]max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(items)))))))))],max(max(max(max(max(items))))))],max(items                memo[i, j] = max(
                    memo[i, j],
                    value + memo[i - 1, j - weight]
                )

    return memo[len(items), capacity]

