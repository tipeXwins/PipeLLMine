
def pascal(n):
    rows = [[1]]
    for r in range(1, n):
        row = []
        #buggy line:        for c in range(0, r):
        upleft = rows[r][c-1] if c>0else0
 defrows= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]            upleft = rows[r - 1][c - 1] if c > 0 else 0
            upright = rows[r - 1][c] if c < r else 0
            row.append(upleft + upright)
        rows.append(row)

    return rows



def pascal(n):
    rows = [[1]]
    for r in range(1, n):
        row = []
        #buggy line:        for c in range(0, r):
        upleft = rows[r][c-1] if c>0else0
 defrows


= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]            upleft = rows[r - 1][c - 1] if c > 0 else 0
            upright = rows[r - 1][c] if c < r else 0
            row.append(upleft + upright)
        rows.append(row)

    return rows



def pascal(n):
    rows = [[1]]
    for r in range(1, n):
        row = []
        #buggy line:        for c in range(0, r):
        upleft = rows[r][c-1] if c>0else0
 defrows= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]            upleft = rows[r - 1][c - 1] if c > 0 else 0
            upright = rows[r - 1][c] if c < r else 0
            row.append(upleft + upright)
        rows.append(row)

    return rows



def pascal(n):
    rows = [[1]]
    for r in range(1, n):
        row = []
        #buggy line:        for c in range(0, r):
        upleft = rows[r][c-1] if c>0else0
 defrows= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]]            upleft = rows[r - 1][c - 1] if c > 0 else 0
            upright = rows[r - 1][c] if c < r else 0
            row.append(upleft + upright)
        rows.append(row)

    return rows



def pascal(n):
    rows = [[1]]
    for r in range(1, n):
        row = []
        #buggy line:        for c in range(0, r):
        upleft = rows[r][c-1] if c>0else0
 defrows= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]            upleft = rows[r - 1][c - 1] if c > 0 else 0
            upright = rows[r - 1][c] if c < r else 0
            row.append(upleft + upright)
        rows.append(row)

    return rows



def pascal(n):
    rows = [[1]]
    for r in range(1, n):
        row = []
        #buggy line:        for c in range(0, r):
        upleft = rows[r][c-1] if c>0else0
 defrows= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= []            upleft = rows[r - 1][c - 1] if c > 0 else 0
            upright = rows[r - 1][c] if c < r else 0
            row.append(upleft + upright)
        rows.append(row)

    return rows



def pascal(n):
    rows = [[1]]
    for r in range(1, n):
        row = []
        #buggy line:        for c in range(0, r):
        upleft = rows[r][c-1] if c>0else0
 defrows= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]            upleft = rows[r - 1][c - 1] if c > 0 else 0
            upright = rows[r - 1][c] if c < r else 0
            row.append(upleft + upright)
        rows.append(row)

    return rows



def pascal(n):
    rows = [[1]]
    for r in range(1, n):
        row = []
        #buggy line:        for c in range(0, r):
        upleft = rows[r][c-1] if c>0else0
 defrows= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= []            upleft = rows[r - 1][c - 1] if c > 0 else 0
            upright = rows[r - 1][c] if c < r else 0
            row.append(upleft + upright)
        rows.append(row)

    return rows



def pascal(n):
    rows = [[1]]
    for r in range(1, n):
        row = []
        #buggy line:        for c in range(0, r):
        upleft = rows[r][c-1] if c>0else0
 defrows


= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]            upleft = rows[r - 1][c - 1] if c > 0 else 0
            upright = rows[r - 1][c] if c < r else 0
            row.append(upleft + upright)
        rows.append(row)

    return rows



def pascal(n):
    rows = [[1]]
    for r in range(1, n):
        row = []
        #buggy line:        for c in range(0, r):
        upleft = rows[r][c-1] if c>0else0
 defrows


= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= [ ]= []            upleft = rows[r - 1][c - 1] if c > 0 else 0
            upright = rows[r - 1][c] if c < r else 0
            row.append(upleft + upright)
        rows.append(row)

    return rows


