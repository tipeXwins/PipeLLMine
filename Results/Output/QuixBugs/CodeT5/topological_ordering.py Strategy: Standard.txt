def topological_ordering(nodes):
    ordered_nodes = [node for node in nodes if not node.incoming_nodes]

    for node in ordered_nodes:
        for nextnode in node.outgoing_nodes:
            #                ordered_nodes.append(nextnode)

    return ordered_nodes


def topological_ordering(nodes):
    ordered_nodes = [node for node in nodes if not node.incoming_nodes]

    for node in ordered_nodes:
        for nextnode in node.outgoing_nodes:
            #print(nextnode) #print(nextnode.outgoing_nodes) #print(nextnode.incoming_nodes) #print(nextnode.incoming_nodes) #print(nextnode.outgoing_nodes)                ordered_nodes.append(nextnode)

    return ordered_nodes


def topological_ordering(nodes):
    ordered_nodes = [node for node in nodes if not node.incoming_nodes]

    for node in ordered_nodes:
        for nextnode in node.outgoing_nodes:
            #print(nextnode) #print(nextnode.outgoing_nodes) #print(nextnode.incoming_nodes) #print(nextnode.outgoing_nodes)                ordered_nodes.append(nextnode)

    return ordered_nodes


def topological_ordering(nodes):
    ordered_nodes = [node for node in nodes if not node.incoming_nodes]

    for node in ordered_nodes:
        for nextnode in node.outgoing_nodes:
            #print(nextnode) #print(nextnode.incoming_nodes) #print(nextnode.outgoing_nodes) #print(nextnode.outgoing_nodes)                ordered_nodes.append(nextnode)

    return ordered_nodes


def topological_ordering(nodes):
    ordered_nodes = [node for node in nodes if not node.incoming_nodes]

    for node in ordered_nodes:
        for nextnode in node.outgoing_nodes:
            #print(nextnode) #print(nextnode.incoming_nodes) #print(nextnode.outgoing_nodes) #print(nextnode.incoming_nodes) #print(nextnode.outgoing_nodes)                ordered_nodes.append(nextnode)

    return ordered_nodes


def topological_ordering(nodes):
    ordered_nodes = [node for node in nodes if not node.incoming_nodes]

    for node in ordered_nodes:
        for nextnode in node.outgoing_nodes:
            #print(nextnode) #print(nextnode.outgoing_nodes) #print(nextnode.incoming_nodes) #print(nextnode.outgoing_nodes) #print(nextnode.outgoing_nodes)                ordered_nodes.append(nextnode)

    return ordered_nodes


def topological_ordering(nodes):
    ordered_nodes = [node for node in nodes if not node.incoming_nodes]

    for node in ordered_nodes:
        for nextnode in node.outgoing_nodes:
            #print(nextnode) #print(nextnode.outgoing_nodes) #print(nextnode.incoming_nodes) #print(nextnode.outgoing_nodes) #print(nextnode.incoming_nodes)                ordered_nodes.append(nextnode)

    return ordered_nodes


def topological_ordering(nodes):
    ordered_nodes = [node for node in nodes if not node.incoming_nodes]

    for node in ordered_nodes:
        for nextnode in node.outgoing_nodes:
            #print(nextnode) #print(nextnode.incoming_nodes) #print(nextnode.outgoing_nodes) #print(nextnode.outgoing_nodes) #print(nextnode.outgoing_nodes)                ordered_nodes.append(nextnode)

    return ordered_nodes


def topological_ordering(nodes):
    ordered_nodes = [node for node in nodes if not node.incoming_nodes]

    for node in ordered_nodes:
        for nextnode in node.outgoing_nodes:
            #print(nextnode) #print(nextnode) #print(nextnode.outgoing_nodes) #print(nextnode.incoming_nodes) #print(nextnode.outgoing_nodes)                ordered_nodes.append(nextnode)

    return ordered_nodes


def topological_ordering(nodes):
    ordered_nodes = [node for node in nodes if not node.incoming_nodes]

    for node in ordered_nodes:
        for nextnode in node.outgoing_nodes:
            #print(nextnode) #print(nextnode) #print(nextnode.incoming_nodes) #print(nextnode.outgoing_nodes) #print(nextnode.outgoing_nodes)                ordered_nodes.append(nextnode)

    return ordered_nodes


