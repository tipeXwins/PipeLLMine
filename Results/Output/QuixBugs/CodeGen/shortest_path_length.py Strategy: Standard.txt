from heapq import *

def shortest_path_length(length_by_edge, startnode, goalnode):
    unvisited_nodes = [] # FibHeap containing (node, distance) pairs
    heappush(unvisited_nodes, (0, startnode))
    visited_nodes = set()

    while len(unvisited_nodes) > 0:
        distance, node = heappop(unvisited_nodes)
        if node is goalnode:
            return distance

        visited_nodes.add(node)

        for nextnode in node.successors:
            if nextnode in visited_nodes:
                continue

            insert_or_update(unvisited_nodes,
                (min(
                    get(unvisited_nodes, nextnode) or float('inf'),
                    distance + length_by_edge(node, nextnode)
                ), nextnode))

    return float('inf')

def insert_or_update(heap, item):
    if item[0] < get(heap, item[1]):
        heapreplace(heap, item)
    else:
        heapreplace(heap, (item[0], item[1]))

def get(heap, node):
    for item in heap:
        if item[1] is node:
            return item[0]
from heapq import *

def shortest_path_length(length_by_edge, startnode, goalnode):
    unvisited_nodes = [] # FibHeap containing (node, distance) pairs
    heappush(unvisited_nodes, (0, startnode))
    visited_nodes = set()

    while len(unvisited_nodes) > 0:
        distance, node = heappop(unvisited_nodes)
        if node is goalnode:
            return distance

        visited_nodes.add(node)

        for nextnode in node.successors:
            if nextnode in visited_nodes:
                continue

            insert_or_update(unvisited_nodes,
                (min(
                    get(unvisited_nodes, nextnode) or float('inf'),
                    distance + length_by_edge[(node, nextnode)]
                ), nextnode))

    return float('inf')

def insert_or_update(heap, item):
    if item[0] < get(heap, item[1]):
        heapreplace(heap, item)
    else:
        heapreplace(heap, (item[0], item[1]))

def get(heap, item):
    for pair in heap:
        if pair[1] is item:
            return pair[0]from heapq import *

def shortest_path_length(length_by_edge, startnode, goalnode):
    unvisited_nodes = [] # FibHeap containing (node, distance) pairs
    heappush(unvisited_nodes, (0, startnode))
    visited_nodes = set()

    while len(unvisited_nodes) > 0:
        distance, node = heappop(unvisited_nodes)
        if node is goalnode:
            return distance

        visited_nodes.add(node)

        for nextnode in node.successors:
            if nextnode in visited_nodes:
                continue

            insert_or_update(unvisited_nodes,
                (min(
                    get(unvisited_nodes, nextnode) or float('inf'),
                    distance + length_by_edge[(node, nextnode)]
                ), nextnode))

    return float('inf')

def insert_or_update(heap, item):
    if item[0] < get(heap, item[1]):
        heapreplace(heap, item)
    else:
        heapreplace(heap, (get(heap, item[1]), item[1]))

def get(heap, item):
    for pair in heap:
        if pair[1] is item:
            from heapq import *

def shortest_path_length(length_by_edge, startnode, goalnode):
    unvisited_nodes = [] # FibHeap containing (node, distance) pairs
    heappush(unvisited_nodes, (0, startnode))
    visited_nodes = set()

    while len(unvisited_nodes) > 0:
        distance, node = heappop(unvisited_nodes)
        if node is goalnode:
            return distance

        visited_nodes.add(node)

        for nextnode in node.successors:
            if nextnode in visited_nodes:
                continue

            insert_or_update(unvisited_nodes,
                (min(
                    get(unvisited_nodes, nextnode) or float('inf'),
                    distance + length_by_edge(node, nextnode)
                ), nextnode))

    return float('inf')

def insert_or_update(heap, item):
    if item[0] < get(heap, item[1]):
        heapreplace(heap, item)
    else:
        heapreplace(heap, (item[0], item[1]))

def get(heap, item):
    for pair in heap:
        if pair[1] is item:
            return pair[0]
from heapq import *

def shortest_path_length(length_by_edge, startnode, goalnode):
    unvisited_nodes = [] # FibHeap containing (node, distance) pairs
    heappush(unvisited_nodes, (0, startnode))
    visited_nodes = set()

    while len(unvisited_nodes) > 0:
        distance, node = heappop(unvisited_nodes)
        if node is goalnode:
            return distance

        visited_nodes.add(node)

        for nextnode in node.successors:
            if nextnode in visited_nodes:
                continue

            insert_or_update(unvisited_nodes,
                (min(
                    get(unvisited_nodes, nextnode) or float('inf'),
                    distance + length_by_edge[(node, nextnode)]
                ), nextnode))

    return float('inf')

def insert_or_update(heap, item):
    if item[0] < get(heap, item[1]):
        heapreplace(heap, item)
    else:
        heapreplace(heap, (get(heap, item[1]), item[1]))

def get(heap, item):
    try:
        return heap[item]
    except KeyError:
        from heapq import *

def shortest_path_length(length_by_edge, startnode, goalnode):
    unvisited_nodes = [] # FibHeap containing (node, distance) pairs
    heappush(unvisited_nodes, (0, startnode))
    visited_nodes = set()

    while len(unvisited_nodes) > 0:
        distance, node = heappop(unvisited_nodes)
        if node is goalnode:
            return distance

        visited_nodes.add(node)

        for nextnode in node.successors:
            if nextnode in visited_nodes:
                continue

            insert_or_update(unvisited_nodes,
                (min(
                    get(unvisited_nodes, nextnode) or float('inf'),
                    distance + length_by_edge[(node, nextnode)]
                ), nextnode))

    return float('inf')

def insert_or_update(heap, item):
    if item[0] < get(heap, item[1]):
        heapreplace(heap, item)
    else:
        heapreplace(heap, (get(heap, item[1]), item[1]))

def get(heap, item):
    for pair in heap:
        if pair[1] == item:
            from heapq import *

def shortest_path_length(length_by_edge, startnode, goalnode):
    unvisited_nodes = [] # FibHeap containing (node, distance) pairs
    heappush(unvisited_nodes, (0, startnode))
    visited_nodes = set()

    while len(unvisited_nodes) > 0:
        distance, node = heappop(unvisited_nodes)
        if node is goalnode:
            return distance

        visited_nodes.add(node)

        for nextnode in node.successors:
            if nextnode in visited_nodes:
                continue

            insert_or_update(unvisited_nodes,
                (min(
                    get(unvisited_nodes, nextnode) or float('inf'),
                    distance + length_by_edge[(node, nextnode)]
                ), nextnode))

    return float('inf')

def insert_or_update(heap, item):
    if item[0] < get(heap, item[1]):
        heapreplace(heap, item)
    else:
        heapreplace(heap, (item[0], item[1]))

def get(heap, item):
    for pair in heap:
        if pair[1] == item:
            return pair[0]from heapq import *

def shortest_path_length(length_by_edge, startnode, goalnode):
    unvisited_nodes = [] # FibHeap containing (node, distance) pairs
    heappush(unvisited_nodes, (0, startnode))
    visited_nodes = set()

    while len(unvisited_nodes) > 0:
        distance, node = heappop(unvisited_nodes)
        if node is goalnode:
            return distance

        visited_nodes.add(node)

        for nextnode in node.successors:
            if nextnode in visited_nodes:
                continue

            insert_or_update(unvisited_nodes,
                (min(
                    get(unvisited_nodes, nextnode) or float('inf'),
                    distance + length_by_edge[(node, nextnode)]
                ), nextnode))

    return float('inf')

def insert_or_update(heap, item):
    if item[0] < get(heap, item[1]):
        heapreplace(heap, item)
    else:
        heapreplace(heap, (get(heap, item[1]), item[1]))

def get(heap, item):
    for pair in heap:
        if item == pair[1]:
            returnfrom heapq import *

def shortest_path_length(length_by_edge, startnode, goalnode):
    unvisited_nodes = [] # FibHeap containing (node, distance) pairs
    heappush(unvisited_nodes, (0, startnode))
    visited_nodes = set()

    while len(unvisited_nodes) > 0:
        distance, node = heappop(unvisited_nodes)
        if node is goalnode:
            return distance

        visited_nodes.add(node)

        for nextnode in node.successors:
            if nextnode in visited_nodes:
                continue

            insert_or_update(unvisited_nodes,
                (min(
                    get(unvisited_nodes, nextnode) or float('inf'),
                    distance + length_by_edge(node, nextnode)
                ), nextnode))

    return float('inf')

def insert_or_update(heap, item):
    if item[0] < get(heap, item[1]):
        heapreplace(heap, item)
    else:
        heapreplace(heap, (item[0], item[1]))

def get(heap, node):
    for item in heap:
        if item[1] is node:
            return item[0]

from heapq import *

def shortest_path_length(length_by_edge, startnode, goalnode):
    unvisited_nodes = [] # FibHeap containing (node, distance) pairs
    heappush(unvisited_nodes, (0, startnode))
    visited_nodes = set()

    while len(unvisited_nodes) > 0:
        distance, node = heappop(unvisited_nodes)
        if node is goalnode:
            return distance

        visited_nodes.add(node)

        for nextnode in node.successors:
            if nextnode in visited_nodes:
                continue

            insert_or_update(unvisited_nodes,
                (min(
                    get(unvisited_nodes, nextnode) or float('inf'),
                    distance + length_by_edge[(node, nextnode)]
                ), nextnode))

    return float('inf')

def insert_or_update(heap, item):
    if item[0] < get(heap, item[1]):
        heapreplace(heap, item)
    else:
        heapreplace(heap, (get(heap, item[1]), item[1]))

def get(heap, item):
    if item in heap:
        return heap[item]
    else:
