def next_palindrome(digit_list):
    high_mid = len(digit_list) // 2
    low_mid = (len(digit_list) - 1) // 2
    while high_mid < len(digit_list) and low_mid >= 0:
        if digit_list[high_mid] == 9:
            digit_list[high_mid] = 0
            digit_list[low_mid] = 0
            high_mid += 1
            low_mid -= 1
        else:
            digit_list[high_mid] += 1
            if low_mid!= high_mid:
                digit_list[low_mid] += 1
            return digit_list
    #buggy line:    return [1] + (len(digit_list)) * [0] + [1]
def next_palindrome(digit_list):
    high_mid = len(digit_list) // 2
    low_mid = (len(digit_list) - 1) // 2
    while high_mid < len(digit_list) and low_mid >= 0:
        if digit_list[high_mid] == 9:
            digit_list[high_mid] = 0
            digit_list[low_mid] = 0
            high_mid += 1
            low_mid -= 1
        else:
            digit_list[high_mid] += 1
            if low_mid!= high_mid:
                digit_list[low_mid] += 1
            return digit_list
    #buggy line:    return [1] + (len(digit_list)) * [0] + [1]
    return digit_list + [1] + (len(digit_list)) * [0] + [1]

print(next_palindrome([1,2,3,4,5,6,7,8,9]))
print(next_palindrome([1,2,3,4,5,6,7,8,9,0]))
print(next_palindrome([1,2,3,4,5,6,7,8,9,9]))
print(next_palindrome([1,2,3def next_palindrome(digit_list):
    high_mid = len(digit_list) // 2
    low_mid = (len(digit_list) - 1) // 2
    while high_mid < len(digit_list) and low_mid >= 0:
        if digit_list[high_mid] == 9:
            digit_list[high_mid] = 0
            digit_list[low_mid] = 0
            high_mid += 1
            low_mid -= 1
        else:
            digit_list[high_mid] += 1
            if low_mid!= high_mid:
                digit_list[low_mid] += 1
            return digit_list
    #buggy line:    return [1] + (len(digit_list)) * [0] + [1]
    return digit_list + ([1] * (len(digit_list))) + ([1] * (len(digit_list)))

def test_next_palindrome():
    print("Testing next_palindrome()...", end="")
    assert(next_palindrome([]) == [])
    assert(next_palindrome([0]) == [0])
    assert(next_palindrome([1]) == [1])
    assert(next_palindrome([9]) == [9])
    assert(next_palindrome([def next_palindrome(digit_list):
    high_mid = len(digit_list) // 2
    low_mid = (len(digit_list) - 1) // 2
    while high_mid < len(digit_list) and low_mid >= 0:
        if digit_list[high_mid] == 9:
            digit_list[high_mid] = 0
            digit_list[low_mid] = 0
            high_mid += 1
            low_mid -= 1
        else:
            digit_list[high_mid] += 1
            if low_mid!= high_mid:
                digit_list[low_mid] += 1
            return digit_list
    #buggy line:    return [1] + (len(digit_list)) * [0] + [1]
    return digit_list + ([1] * (len(digit_list))) + ([1] * (len(digit_list)))

def test_next_palindrome():
    print("Testing next_palindrome()...", end="")
    assert(next_palindrome([]) == [])
    assert(next_palindrome([0]) == [0])
    assert(next_palindrome([1]) == [1])
    assert(next_palindrome([2]) == [2])
    assert(next_palindrome([def next_palindrome(digit_list):
    high_mid = len(digit_list) // 2
    low_mid = (len(digit_list) - 1) // 2
    while high_mid < len(digit_list) and low_mid >= 0:
        if digit_list[high_mid] == 9:
            digit_list[high_mid] = 0
            digit_list[low_mid] = 0
            high_mid += 1
            low_mid -= 1
        else:
            digit_list[high_mid] += 1
            if low_mid!= high_mid:
                digit_list[low_mid] += 1
            return digit_list
    #buggy line:    return [1] + (len(digit_list)) * [0] + [1]
    return digit_list + ([1] * (len(digit_list))) + ([1] * (len(digit_list)))

def test_next_palindrome():
    print("Testing next_palindrome()...", end="")
    assert(next_palindrome([]) == [])
    assert(next_palindrome([1]) == [1])
    assert(next_palindrome([1, 2]) == [1, 2])
    assert(next_palindrome([1, 2, 3]) == [1, 2,def next_palindrome(digit_list):
    high_mid = len(digit_list) // 2
    low_mid = (len(digit_list) - 1) // 2
    while high_mid < len(digit_list) and low_mid >= 0:
        if digit_list[high_mid] == 9:
            digit_list[high_mid] = 0
            digit_list[low_mid] = 0
            high_mid += 1
            low_mid -= 1
        else:
            digit_list[high_mid] += 1
            if low_mid!= high_mid:
                digit_list[low_mid] += 1
            return digit_list
    #buggy line:    return [1] + (len(digit_list)) * [0] + [1]
    return digit_list + [1] + (len(digit_list)) * [0] + [1]

print(next_palindrome([1,2,3,4,5,6,7,8,9]))
print(next_palindrome([1,2,3,4,5,6,7,8,9,0]))
print(next_palindrome([1,2,3,4,5,6,7,8,9,0,0]))
print(next_palindrome([1,2def next_palindrome(digit_list):
    high_mid = len(digit_list) // 2
    low_mid = (len(digit_list) - 1) // 2
    while high_mid < len(digit_list) and low_mid >= 0:
        if digit_list[high_mid] == 9:
            digit_list[high_mid] = 0
            digit_list[low_mid] = 0
            high_mid += 1
            low_mid -= 1
        else:
            digit_list[high_mid] += 1
            if low_mid!= high_mid:
                digit_list[low_mid] += 1
            return digit_list
    #buggy line:    return [1] + (len(digit_list)) * [0] + [1]
    return digit_list + ([1] * (len(digit_list))) + ([1] * (len(digit_list)))

def test_next_palindrome():
    print("Testing next_palindrome()...", end="")
    assert(next_palindrome([]) == [])
    assert(next_palindrome([1]) == [1])
    assert(next_palindrome([1,2]) == [1,2])
    assert(next_palindrome([1,2,3]) == [1,2,def next_palindrome(digit_list):
    high_mid = len(digit_list) // 2
    low_mid = (len(digit_list) - 1) // 2
    while high_mid < len(digit_list) and low_mid >= 0:
        if digit_list[high_mid] == 9:
            digit_list[high_mid] = 0
            digit_list[low_mid] = 0
            high_mid += 1
            low_mid -= 1
        else:
            digit_list[high_mid] += 1
            if low_mid!= high_mid:
                digit_list[low_mid] += 1
            return digit_list
    #buggy line:    return [1] + (len(digit_list)) * [0] + [1]
    return digit_list + ([1] * (len(digit_list))) + ([1] * (len(digit_list)))

def test_next_palindrome():
    print("Testing next_palindrome()...", end="")
    assert(next_palindrome([]) == [])
    assert(next_palindrome([0]) == [0])
    assert(next_palindrome([1]) == [1])
    assert(next_palindrome([0, 1]) == [1, 0])
    assert(next_def next_palindrome(digit_list):
    high_mid = len(digit_list) // 2
    low_mid = (len(digit_list) - 1) // 2
    while high_mid < len(digit_list) and low_mid >= 0:
        if digit_list[high_mid] == 9:
            digit_list[high_mid] = 0
            digit_list[low_mid] = 0
            high_mid += 1
            low_mid -= 1
        else:
            digit_list[high_mid] += 1
            if low_mid!= high_mid:
                digit_list[low_mid] += 1
            return digit_list
    #buggy line:    return [1] + (len(digit_list)) * [0] + [1]
    return digit_list + ([1] * (len(digit_list))) + ([1] * (len(digit_list)))

def test_next_palindrome():
    print("Testing next_palindrome()...", end="")
    assert(next_palindrome([]) == [])
    assert(next_palindrome([1]) == [1])
    assert(next_palindrome([1,2]) == [1,2])
    assert(next_palindrome([1,9]) == [1,9])
    def next_palindrome(digit_list):
    high_mid = len(digit_list) // 2
    low_mid = (len(digit_list) - 1) // 2
    while high_mid < len(digit_list) and low_mid >= 0:
        if digit_list[high_mid] == 9:
            digit_list[high_mid] = 0
            digit_list[low_mid] = 0
            high_mid += 1
            low_mid -= 1
        else:
            digit_list[high_mid] += 1
            if low_mid!= high_mid:
                digit_list[low_mid] += 1
            return digit_list
    #buggy line:    return [1] + (len(digit_list)) * [0] + [1]
    return digit_list + [1] + (len(digit_list)) * [0] + [1]

print(next_palindrome([1,2,3,4,5,6,7,8,9]))
print(next_palindrome([1,2,3,4,5,6,7,8,9,0]))
print(next_palindrome([1,2,3,4,5,6,7,8,9,9]))
print(next_palindrome([9,9,9