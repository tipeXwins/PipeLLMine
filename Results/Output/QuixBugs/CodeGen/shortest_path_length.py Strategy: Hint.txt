from heapq import *

def shortest_path_length(length_by_edge, startnode, goalnode):
    unvisited_nodes = [] # FibHeap containing (node, distance) pairs
    heappush(unvisited_nodes, (0, startnode))
    visited_nodes = set()

    while len(unvisited_nodes) > 0:
        distance, node = heappop(unvisited_nodes)
        if node is goalnode:
            return distance

        visited_nodes.add(node)

        for nextnode in node.successors:
            if nextnode in visited_nodes:
                continue

            insert_or_update(unvisited_nodes,
                (min(
                    get(unvisited_nodes, nextnode) or float('inf'),
                    #buggy line:                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                ), nextnode))

    return -1

def insert_or_update(heap, item):
    if item[0] is None or item[0] > item[1]:
        heappush(heap, item)
    else:
        heapreplace(heap, item)

def get(heap, node):
    for item in heap:
        if item[1] is node:
            return item[0from heapq import *

def shortest_path_length(length_by_edge, startnode, goalnode):
    unvisited_nodes = [] # FibHeap containing (node, distance) pairs
    heappush(unvisited_nodes, (0, startnode))
    visited_nodes = set()

    while len(unvisited_nodes) > 0:
        distance, node = heappop(unvisited_nodes)
        if node is goalnode:
            return distance

        visited_nodes.add(node)

        for nextnode in node.successors:
            if nextnode in visited_nodes:
                continue

            insert_or_update(unvisited_nodes,
                (min(
                    get(unvisited_nodes, nextnode) or float('inf'),
                    #buggy line:                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                ), nextnode))

    return -1

def insert_or_update(heap, item):
    if item[0] is None or item[0] > item[1]:
        heappush(heap, item)
    else:
        heapreplace(heap, item)

def get(heap, node):
    for item in heap:
        if item[1] == node:
            return item[0from heapq import *

def shortest_path_length(length_by_edge, startnode, goalnode):
    unvisited_nodes = [] # FibHeap containing (node, distance) pairs
    heappush(unvisited_nodes, (0, startnode))
    visited_nodes = set()

    while len(unvisited_nodes) > 0:
        distance, node = heappop(unvisited_nodes)
        if node is goalnode:
            return distance

        visited_nodes.add(node)

        for nextnode in node.successors:
            if nextnode in visited_nodes:
                continue

            insert_or_update(unvisited_nodes,
                (min(
                    get(unvisited_nodes, nextnode) or float('inf'),
                    #buggy line:                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                ), nextnode))

    return -1

def insert_or_update(heap, item):
    if item[0] is None or item[0] > item[1]:
        heappush(heap, item)
    else:
        heappushpop(heap, item)

def get(heap, node):
    for item in heap:
        if item[1] is node:
            return item[from heapq import *

def shortest_path_length(length_by_edge, startnode, goalnode):
    unvisited_nodes = [] # FibHeap containing (node, distance) pairs
    heappush(unvisited_nodes, (0, startnode))
    visited_nodes = set()

    while len(unvisited_nodes) > 0:
        distance, node = heappop(unvisited_nodes)
        if node is goalnode:
            return distance

        visited_nodes.add(node)

        for nextnode in node.successors:
            if nextnode in visited_nodes:
                continue

            insert_or_update(unvisited_nodes,
                (min(
                    get(unvisited_nodes, nextnode) or float('inf'),
                    #buggy line:                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                ), nextnode))

    return float('inf')

def insert_or_update(heap, item):
    if item[0] is None or item[0] > item[1]:
        heappush(heap, item)
    else:
        heapreplace(heap, item)

def get(heap, node):
    for pair in heap:
        if pair[1] is node:
            return pairfrom heapq import *

def shortest_path_length(length_by_edge, startnode, goalnode):
    unvisited_nodes = [] # FibHeap containing (node, distance) pairs
    heappush(unvisited_nodes, (0, startnode))
    visited_nodes = set()

    while len(unvisited_nodes) > 0:
        distance, node = heappop(unvisited_nodes)
        if node is goalnode:
            return distance

        visited_nodes.add(node)

        for nextnode in node.successors:
            if nextnode in visited_nodes:
                continue

            insert_or_update(unvisited_nodes,
                (min(
                    get(unvisited_nodes, nextnode) or float('inf'),
                    #buggy line:                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                ), nextnode))

    return float('inf')

def insert_or_update(heap, item):
    if item[0] is None or item[0] > item[1]:
        heappush(heap, item)
    else:
        heappushpop(heap, item)

def get(heap, node):
    for pair in heap:
        if pair[1] is node:
            returnfrom heapq import *

def shortest_path_length(length_by_edge, startnode, goalnode):
    unvisited_nodes = [] # FibHeap containing (node, distance) pairs
    heappush(unvisited_nodes, (0, startnode))
    visited_nodes = set()

    while len(unvisited_nodes) > 0:
        distance, node = heappop(unvisited_nodes)
        if node is goalnode:
            return distance

        visited_nodes.add(node)

        for nextnode in node.successors:
            if nextnode in visited_nodes:
                continue

            insert_or_update(unvisited_nodes,
                (min(
                    get(unvisited_nodes, nextnode) or float('inf'),
                    #buggy line:                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                ), nextnode))

    return -1

def insert_or_update(heap, item):
    if item[0] is None or item[0] > item[1]:
        heappush(heap, item)
    else:
        heappushpop(heap, item)

def get(heap, node):
    for item in heap:
        if item[1] == node:
            return item[from heapq import *

def shortest_path_length(length_by_edge, startnode, goalnode):
    unvisited_nodes = [] # FibHeap containing (node, distance) pairs
    heappush(unvisited_nodes, (0, startnode))
    visited_nodes = set()

    while len(unvisited_nodes) > 0:
        distance, node = heappop(unvisited_nodes)
        if node is goalnode:
            return distance

        visited_nodes.add(node)

        for nextnode in node.successors:
            if nextnode in visited_nodes:
                continue

            insert_or_update(unvisited_nodes,
                (min(
                    get(unvisited_nodes, nextnode) or float('inf'),
                    #buggy line:                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                ), nextnode))

    return float('inf')

def insert_or_update(heap, item):
    if item[0] is None or item[0] > item[1]:
        heappush(heap, item)
    else:
        heappushpop(heap, item)

def get(heap, node):
    for item in heap:
        if item[1] is node:
            returnfrom heapq import *

def shortest_path_length(length_by_edge, startnode, goalnode):
    unvisited_nodes = [] # FibHeap containing (node, distance) pairs
    heappush(unvisited_nodes, (0, startnode))
    visited_nodes = set()

    while len(unvisited_nodes) > 0:
        distance, node = heappop(unvisited_nodes)
        if node is goalnode:
            return distance

        visited_nodes.add(node)

        for nextnode in node.successors:
            if nextnode in visited_nodes:
                continue

            insert_or_update(unvisited_nodes,
                (min(
                    get(unvisited_nodes, nextnode) or float('inf'),
                    #buggy line:                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                ), nextnode))

    return float('inf')

def insert_or_update(heap, item):
    if item[0] is None or item[0] > item[1]:
        heappush(heap, item)
    else:
        heapreplace(heap, item)

def get(heap, node):
    for item in heap:
        if item[1] is node:
            return itemfrom heapq import *

def shortest_path_length(length_by_edge, startnode, goalnode):
    unvisited_nodes = [] # FibHeap containing (node, distance) pairs
    heappush(unvisited_nodes, (0, startnode))
    visited_nodes = set()

    while len(unvisited_nodes) > 0:
        distance, node = heappop(unvisited_nodes)
        if node is goalnode:
            return distance

        visited_nodes.add(node)

        for nextnode in node.successors:
            if nextnode in visited_nodes:
                continue

            insert_or_update(unvisited_nodes,
                (min(
                    get(unvisited_nodes, nextnode) or float('inf'),
                    #buggy line:                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                ), nextnode))

    return float('inf')

def insert_or_update(heap, item):
    if item[0] is None or item[0] > item[1]:
        heappush(heap, item)
    else:
        heapreplace(heap, item)

def get(heap, node):
    for item in heap:
        if item[1] == node:
            return itemfrom heapq import *

def shortest_path_length(length_by_edge, startnode, goalnode):
    unvisited_nodes = [] # FibHeap containing (node, distance) pairs
    heappush(unvisited_nodes, (0, startnode))
    visited_nodes = set()

    while len(unvisited_nodes) > 0:
        distance, node = heappop(unvisited_nodes)
        if node is goalnode:
            return distance

        visited_nodes.add(node)

        for nextnode in node.successors:
            if nextnode in visited_nodes:
                continue

            insert_or_update(unvisited_nodes,
                (min(
                    get(unvisited_nodes, nextnode) or float('inf'),
                    #buggy line:                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                    get(unvisited_nodes, nextnode) + length_by_edge[node, nextnode]
                ), nextnode))

    return float('inf')

def insert_or_update(heap, item):
    if item[0] is None or item[0] > item[1]:
        heappush(heap, item)
    else:
        heappushpop(heap, item)

def get(heap, node):
    for item in heap:
        if item[1] == node:
            return