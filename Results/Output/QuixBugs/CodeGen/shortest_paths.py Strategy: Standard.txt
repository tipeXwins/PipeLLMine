
def shortest_paths(source, weight_by_edge):
    weight_by_node = {
        v: float('inf') for u, v in weight_by_edge
    }
    weight_by_node[source] = 0

    for i in range(len(weight_by_node) - 1):
        for (u, v), weight in weight_by_edge.items():
            if weight_by_node[u] + weight < weight_by_node[v]:
                weight_by_node[v] = weight_by_node[u] + weight

    return weight_by_node


if __name__ == '__main__':
    weight_by_edge = {
        ('A', 'B'): 3,
        ('A', 'C'): 2,
        ('B', 'D'): 1,
        ('B', 'E'): 2,
        ('C', 'D'): 4,
        
def shortest_paths(source, weight_by_edge):
    weight_by_node = {
        v: float('inf') for u, v in weight_by_edge
    }
    weight_by_node[source] = 0

    for i in range(len(weight_by_node) - 1):
        for (u, v), weight in weight_by_edge.items():
            if weight_by_node[v] > weight_by_node[u] + weight:
                weight_by_node[v] = weight_by_node[u] + weight

    return weight_by_node


if __name__ == '__main__':
    weight_by_edge = {
        ('A', 'B'): 3,
        ('A', 'C'): 2,
        ('B', 'D'): 1,
        ('B', 'E'): 2,
        ('C', 'D'): 4,

def shortest_paths(source, weight_by_edge):
    weight_by_node = {
        v: float('inf') for u, v in weight_by_edge
    }
    weight_by_node[source] = 0

    for i in range(len(weight_by_node) - 1):
        for (u, v), weight in weight_by_edge.items():
            if weight_by_node[u] + weight < weight_by_node[v]:
                weight_by_node[v] = weight_by_node[u] + weight

    return weight_by_node


if __name__ == '__main__':
    weight_by_edge = {
        ('A', 'B'): 3,
        ('A', 'C'): 2,
        ('B', 'C'): 1,
        ('B', 'D'): 2,
        ('C', 'D'): 4,
        
def shortest_paths(source, weight_by_edge):
    weight_by_node = {
        v: float('inf') for u, v in weight_by_edge
    }
    weight_by_node[source] = 0

    for i in range(len(weight_by_node) - 1):
        for (u, v), weight in weight_by_edge.items():
            if weight_by_node[u] + weight < weight_by_node[v]:
                weight_by_node[v] = weight_by_node[u] + weight

    return weight_by_node


if __name__ == '__main__':
    weight_by_edge = {
        ('A', 'B'): 3,
        ('A', 'C'): 2,
        ('B', 'C'): 1,
        ('B', 'D'): 2,
        ('C', 'D'): 4,
    
def shortest_paths(source, weight_by_edge):
    weight_by_node = {
        v: float('inf') for u, v in weight_by_edge
    }
    weight_by_node[source] = 0

    for i in range(len(weight_by_node) - 1):
        for (u, v), weight in weight_by_edge.items():
            new_weight = weight_by_node[u] + weight
            if new_weight < weight_by_node[v]:
                weight_by_node[v] = new_weight

    return weight_by_node


if __name__ == '__main__':
    weight_by_edge = {
        ('A', 'B'): 3,
        ('A', 'C'): 2,
        ('B', 'D'): 1,
        ('B', 'E'): 2,
        ('C', 'D'): 4,
def shortest_paths(source, weight_by_edge):
    weight_by_node = {
        v: float('inf') for u, v in weight_by_edge
    }
    weight_by_node[source] = 0

    for i in range(len(weight_by_node) - 1):
        for (u, v), weight in weight_by_edge.items():
            if weight_by_node[u] + weight < weight_by_node[v]:
                weight_by_node[v] = weight_by_node[u] + weight

    return weight_by_node


if __name__ == '__main__':
    weight_by_edge = {
        ('A', 'B'): 3,
        ('A', 'C'): 2,
        ('B', 'D'): 1,
        ('B', 'E'): 2,
        ('C', 'D'): 3,
        
def shortest_paths(source, weight_by_edge):
    weight_by_node = {
        v: float('inf') for u, v in weight_by_edge
    }
    weight_by_node[source] = 0

    for i in range(len(weight_by_node) - 1):
        for (u, v), weight in weight_by_edge.items():
            if weight_by_node[u] + weight < weight_by_node[v]:
                weight_by_node[v] = weight_by_node[u] + weight

    return weight_by_node


if __name__ == '__main__':
    weight_by_edge = {
        ('A', 'B'): 1,
        ('A', 'C'): 2,
        ('B', 'C'): 3,
        ('B', 'D'): 4,
        ('C', 'D'): 5,
        
def shortest_paths(source, weight_by_edge):
    weight_by_node = {
        v: float('inf') for u, v in weight_by_edge
    }
    weight_by_node[source] = 0

    for i in range(len(weight_by_node) - 1):
        for (u, v), weight in weight_by_edge.items():
            if weight_by_node[u] + weight < weight_by_node[v]:
                weight_by_node[v] = weight_by_node[u] + weight

    return weight_by_node


if __name__ == '__main__':
    weight_by_edge = {
        ('A', 'B'): 1,
        ('A', 'C'): 2,
        ('B', 'C'): 3,
        ('B', 'D'): 2,
        ('C', 'D'): 1,
        
def shortest_paths(source, weight_by_edge):
    weight_by_node = {
        v: float('inf') for u, v in weight_by_edge
    }
    weight_by_node[source] = 0

    for i in range(len(weight_by_node) - 1):
        for (u, v), weight in weight_by_edge.items():
            if weight_by_node[u] + weight < weight_by_node[v]:
                weight_by_node[v] = weight_by_node[u] + weight

    return weight_by_node


if __name__ == '__main__':
    weight_by_edge = {
        ('A', 'B'): 1,
        ('A', 'C'): 2,
        ('B', 'C'): 3,
        ('B', 'D'): 2,
        ('C', 'D'): 3,
        
def shortest_paths(source, weight_by_edge):
    weight_by_node = {
        v: float('inf') for u, v in weight_by_edge
    }
    weight_by_node[source] = 0

    for i in range(len(weight_by_node) - 1):
        for (u, v), weight in weight_by_edge.items():
            if weight_by_node[u] + weight < weight_by_node[v]:
                weight_by_node[v] = weight_by_node[u] + weight

    return weight_by_node


if __name__ == '__main__':
    weight_by_edge = {
        ('A', 'B'): 1,
        ('A', 'C'): 2,
        ('B', 'C'): 3,
        ('B', 'D'): 2,
        ('C', 'D'): 4,
        