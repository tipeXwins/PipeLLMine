def next_palindrome(digit_list):
    high_mid = len(digit_list) // 2
    low_mid = (len(digit_list) - 1) // 2
    while high_mid < len(digit_list) and low_mid >= 0:
        if digit_list[high_mid] == 9:
            digit_list[high_mid] = 0
            digit_list[low_mid] = 0
            high_mid += 1
            low_mid -= 1
        else:
            digit_list[high_mid] += 1
            if low_mid!= high_mid:
                digit_list[low_mid] += 1
            return digit_list
def next_palindrome(digit_list):
    high_mid = len(digit_list) // 2
    low_mid = (len(digit_list) - 1) // 2
    while high_mid < len(digit_list) and low_mid >= 0:
        if digit_list[high_mid] == 9:
            digit_list[high_mid] = 0
            digit_list[low_mid] = 0
            high_mid += 1
            low_mid -= 1
        else:
            digit_list[high_mid] += 1
            if low_mid!= high_mid:
                digit_list[low_mid] += 1
            return digit_list
    return digit_list
def next_palindrome(digit_list):
    high_mid = len(digit_list) // 2
    low_mid = (len(digit_list) - 1) // 2
    while high_mid < len(digit_list) and low_mid >= 0:
        if digit_list[high_mid] == 9:
            digit_list[high_mid] = 0
            digit_list[low_mid] = 0
            high_mid += 1
            low_mid -= 1
        else:
            digit_list[high_mid] += 1
            if low_mid!= high_mid:
                digit_list[low_mid] += 1
            return digit_list
    return digit_list


if __name__ == '__main__':
    digit_list = list(map(int, input().split()))
    print(next_palindrome(digit_list))
def next_palindrome(digit_list):
    high_mid = len(digit_list) // 2
    low_mid = (len(digit_list) - 1) // 2
    while high_mid < len(digit_list) and low_mid >= 0:
        if digit_list[high_mid] == 9:
            digit_list[high_mid] = 0
            digit_list[low_mid] = 0
            high_mid += 1
            low_mid -= 1
        else:
            digit_list[high_mid] += 1
            if low_mid!= high_mid:
                digit_list[low_mid] += 1
            return digit_list
    return digit_list


if __name__ == '__main__':
    digit_list = list(map(int, input().split()))
    digit_list = next_palindrome(digit_list)
    print(*digit_list)
def next_palindrome(digit_list):
    high_mid = len(digit_list) // 2
    low_mid = (len(digit_list) - 1) // 2
    while high_mid < len(digit_list) and low_mid >= 0:
        if digit_list[high_mid] == 9:
            digit_list[high_mid] = 0
            digit_list[low_mid] = 0
            high_mid += 1
            low_mid -= 1
        else:
            digit_list[high_mid] += 1
            if low_mid!= high_mid:
                digit_list[low_mid] += 1
            return digit_list
    return digit_list


if __name__ == '__main__':
    digit_list = list(map(int, input().split()))
    digit_list = next_palindrome(digit_list)
    print(''.join(map(str, digit_list)))
def next_palindrome(digit_list):
    high_mid = len(digit_list) // 2
    low_mid = (len(digit_list) - 1) // 2
    while high_mid < len(digit_list) and low_mid >= 0:
        if digit_list[high_mid] == 9:
            digit_list[high_mid] = 0
            digit_list[low_mid] = 0
            high_mid += 1
            low_mid -= 1
        else:
            digit_list[high_mid] += 1
            if low_mid!= high_mid:
                digit_list[low_mid] += 1
            return digit_list
    return digit_list


def test_next_palindrome():
    assert next_palindrome([]) == []
    assert next_palindrome([0]) == [0]
    assert next_palindrome([1]) == [1]
    assert next_palindrome([2]) == [2]
    assert next_palindrome([3]) == [3]
    assert next_palindrome([4]) == [4]
    assert next_palindrome([5]) == [5]
    assert next_palindrome([6def next_palindrome(digit_list):
    high_mid = len(digit_list) // 2
    low_mid = (len(digit_list) - 1) // 2
    while high_mid < len(digit_list) and low_mid >= 0:
        if digit_list[high_mid] == 9:
            digit_list[high_mid] = 0
            digit_list[low_mid] = 0
            high_mid += 1
            low_mid -= 1
        else:
            digit_list[high_mid] += 1
            if low_mid!= high_mid:
                digit_list[low_mid] += 1
            return digit_list
    return digit_list


if __name__ == '__main__':
    digit_list = list(map(int, input().split()))
    digit_list = next_palindrome(digit_list)
    print(''.join(map(str, digit_list)))def next_palindrome(digit_list):
    high_mid = len(digit_list) // 2
    low_mid = (len(digit_list) - 1) // 2
    while high_mid < len(digit_list) and low_mid >= 0:
        if digit_list[high_mid] == 9:
            digit_list[high_mid] = 0
            digit_list[low_mid] = 0
            high_mid += 1
            low_mid -= 1
        else:
            digit_list[high_mid] += 1
            if low_mid!= high_mid:
                digit_list[low_mid] += 1
            return digit_list
    return digit_list


def test_next_palindrome():
    assert next_palindrome([]) == []
    assert next_palindrome([1]) == [1]
    assert next_palindrome([1, 9]) == [1, 9]
    assert next_palindrome([1, 9, 9]) == [1, 9, 9]
    assert next_palindrome([1, 9, 9, 9]) == [1, 9, 9, 9]
    assert next_palindrome([1, 9, 9, 9def next_palindrome(digit_list):
    high_mid = len(digit_list) // 2
    low_mid = (len(digit_list) - 1) // 2
    while high_mid < len(digit_list) and low_mid >= 0:
        if digit_list[high_mid] == 9:
            digit_list[high_mid] = 0
            digit_list[low_mid] = 0
            high_mid += 1
            low_mid -= 1
        else:
            digit_list[high_mid] += 1
            if low_mid!= high_mid:
                digit_list[low_mid] += 1
            return digit_list
    return digit_list


def test_next_palindrome():
    assert next_palindrome([]) == []
    assert next_palindrome([1]) == [1]
    assert next_palindrome([1, 9]) == [1, 0]
    assert next_palindrome([1, 9, 9]) == [1, 0, 0]
    assert next_palindrome([1, 9, 9, 9]) == [1, 0, 0, 0]
    assert next_palindrome([1, 9, 9, 9def next_palindrome(digit_list):
    high_mid = len(digit_list) // 2
    low_mid = (len(digit_list) - 1) // 2
    while high_mid < len(digit_list) and low_mid >= 0:
        if digit_list[high_mid] == 9:
            digit_list[high_mid] = 0
            digit_list[low_mid] = 0
            high_mid += 1
            low_mid -= 1
        else:
            digit_list[high_mid] += 1
            if low_mid!= high_mid:
                digit_list[low_mid] += 1
            return digit_list
    return digit_list


def test_next_palindrome():
    assert next_palindrome([]) == []
    assert next_palindrome([1]) == [1]
    assert next_palindrome([1, 9]) == [1, 9]
    assert next_palindrome([1, 9, 9]) == [1, 9, 9]
    assert next_palindrome([1, 9, 9, 9]) == [1, 9, 9, 9]
    assert next_palindrome([9, 9, 9, 9