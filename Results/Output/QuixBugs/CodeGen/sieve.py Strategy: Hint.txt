def sieve(max):
    primes = []
    for n in range(2, max + 1):
        #buggy line:        if any(n % p > 0 for p in primes):
        if any(n % p > 0 for p in primes):
            continue
        primes.append(n)
    return primes

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return Truedef sieve(max):
    primes = []
    for n in range(2, max + 1):
        #buggy line:        if any(n % p > 0 for p in primes):
        if any(n % p > 0 for p in primes):
            continue
        primes.append(n)
    return primes

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i = i + 6
    def sieve(max):
    primes = []
    for n in range(2, max + 1):
        #buggy line:        if any(n % p > 0 for p in primes):
        if any(n % p > 0 for p in primes):
            continue
        primes.append(n)
    return primes

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i ** 2 <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return Truedef sieve(max):
    primes = []
    for n in range(2, max + 1):
        #buggy line:        if any(n % p > 0 for p in primes):
        if any(n % p > 0 for p in primes):
            continue
        primes.append(n)
    return primes

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i**2 <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return Truedef sieve(max):
    primes = []
    for n in range(2, max + 1):
        #buggy line:        if any(n % p > 0 for p in primes):
        if any(n % p > 0 for p in primes):
            continue
        primes.append(n)
    return primes

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i*i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return Truedef sieve(max):
    primes = []
    for n in range(2, max + 1):
        #buggy line:        if any(n % p > 0 for p in primes):
        if any(n % p > 0 for p in primes):
            continue
        primes.append(n)
    return primes

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i+2) == 0:
            return False
        i += 6
    return Truedef sieve(max):
    primes = []
    for n in range(2, max + 1):
        #buggy line:        if any(n % p > 0 for p in primes):
        if any(n % p > 0 for p in primes):
            continue
        primes.append(n)
    return primes

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i*i <= n:
        if n % i == 0 or n % (i+2) == 0:
            return False
        i += 6
    return Truedef sieve(max):
    primes = []
    for n in range(2, max + 1):
        #buggy line:        if any(n % p > 0 for p in primes):
        if any(n % p > 0 for p in primes):
            continue
        primes.append(n)
    return primes

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(n ** 0.5) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
def sieve(max):
    primes = []
    for n in range(2, max + 1):
        #buggy line:        if any(n % p > 0 for p in primes):
        if any(n % p > 0 for p in primes):
            continue
        primes.append(n)
    return primes

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    for i in range(5, int(math.sqrt(n) + 1), 6):
        if n % i == 0 or n % (i + 2) == 0:
            return Falsedef sieve(max):
    primes = []
    for n in range(2, max + 1):
        #buggy line:        if any(n % p > 0 for p in primes):
        if any(n % p > 0 for p in primes):
            continue
        primes.append(n)
    return primes

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6

    return True