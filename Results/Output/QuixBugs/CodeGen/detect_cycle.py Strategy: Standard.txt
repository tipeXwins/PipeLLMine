def detect_cycle(node):
    hare = tortoise = node

    while True:
        if hare is None or tortoise is None:
            return False

        if hare == tortoise:
            return True

        hare = hare.next
        tortoise = tortoise.next.next


class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None

    def print_list(self):
        cur_node = self.head
        while cur_node:
def detect_cycle(node):
    hare = tortoise = node

    while True:
        if hare is None or tortoise is None:
            return False

        if hare == tortoise:
            return True

        hare = hare.next
        tortoise = tortoise.next.next


class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None

    def push(self, new_data):
        new_node = Node(new_data)
        newdef detect_cycle(node):
    hare = tortoise = node

    while True:
        if hare is None or tortoise is None:
            return False

        if hare == tortoise:
            return True

        hare = hare.next
        tortoise = tortoise.next.next


class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        if not head:
            return False

        hare = tortoise = head

        while True:
            if hare is None or tortoise is None:
                return False

            if hare == tortoise:
                return True

            hare =def detect_cycle(node):
    hare = tortoise = node

    while True:
        if hare is None or tortoise is None:
            return False

        if hare == tortoise:
            return True

        hare = hare.next
        tortoise = tortoise.next.next


class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None

    def push(self, data):
        new_node = Node(data)

        if self.head isdef detect_cycle(node):
    hare = tortoise = node

    while True:
        if hare is None or tortoise is None:
            return False

        if hare == tortoise:
            return True

        hare = hare.next
        tortoise = tortoise.next.next


class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        if head is None:
            return False

        hare = tortoise = head

        while True:
            if hare is None or tortoise is None:
                return False

            if hare == tortoise:
                return True

            haredef detect_cycle(node):
    hare = tortoise = node

    while True:
        if hare is None or tortoise is None:
            return False

        if hare == tortoise:
            return True

        hare = hare.next
        tortoise = tortoise.next.next


class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None

    def push(self, data):
        new_node = Node(data)
        new_node.nextdef detect_cycle(node):
    hare = tortoise = node

    while True:
        if hare is None or tortoise is None:
            return False

        if hare == tortoise:
            return True

        hare = hare.next
        tortoise = tortoise.next.next


class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None

    def push(self, data):
        new_node = Node(data)
        if self.head isdef detect_cycle(node):
    hare = tortoise = node

    while True:
        if hare is None or tortoise is None:
            return False

        if hare == tortoise:
            return True

        hare = hare.next
        tortoise = tortoise.next.next


class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None

    def print_list(self):
        curr = self.head
        while curr:
            printdef detect_cycle(node):
    hare = tortoise = node

    while True:
        if hare is None or tortoise is None:
            return False

        if hare == tortoise:
            return True

        hare = hare.next
        tortoise = tortoise.next.next


class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None

    def insert_node(self, data):
        new_node = Node(data)

        if self.def detect_cycle(node):
    hare = tortoise = node

    while True:
        if hare is None or tortoise is None:
            return False

        if hare == tortoise:
            return True

        hare = hare.next
        tortoise = tortoise.next.next


class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None

    def insert_node(self, data):
        new_node = Node(data)
        if self.