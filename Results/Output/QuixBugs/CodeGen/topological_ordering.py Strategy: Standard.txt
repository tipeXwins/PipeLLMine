def topological_ordering(nodes):
    ordered_nodes = [node for node in nodes if not node.incoming_nodes]

    for node in ordered_nodes:
        for nextnode in node.outgoing_nodes:
            nextnode.incoming_nodes.remove(node)
            if not nextnode.incoming_nodes:
                ordered_nodes.append(nextnode)

    return ordered_nodes
def topological_ordering(nodes):
    ordered_nodes = [node for node in nodes if not node.incoming_nodes]

    for node in ordered_nodes:
        for nextnode in node.outgoing_nodes:
            nextnode.incoming_nodes.remove(node)
            if not nextnode.incoming_nodes:
                ordered_nodes.append(nextnode)

    return ordered_nodes


class Node:
    def __init__(self, name):
        self.name = name
        self.incoming_nodes = []
        self.outgoing_nodes = []

    def add_incoming_node(self, node):
        self.incoming_nodes.append(node)

    def add_outgoing_nodedef topological_ordering(nodes):
    ordered_nodes = [node for node in nodes if not node.incoming_nodes]

    for node in ordered_nodes:
        for nextnode in node.outgoing_nodes:
            if not nextnode.incoming_nodes:
                nextnode.incoming_nodes.append(node)

    return ordered_nodes
def topological_ordering(nodes):
    ordered_nodes = [node for node in nodes if not node.incoming_nodes]

    for node in ordered_nodes:
        for nextnode in node.outgoing_nodes:
            nextnode.incoming_nodes.remove(node)
            if not nextnode.incoming_nodes:
                ordered_nodes.append(nextnode)

    return ordered_nodes


class Node:
    def __init__(self, name):
        self.name = name
        self.incoming_nodes = []
        self.outgoing_nodes = []

    def add_incoming_node(self, node):
        self.incoming_nodes.append(node)
        node.outgoing_nodesdef topological_ordering(nodes):
    ordered_nodes = [node for node in nodes if not node.incoming_nodes]

    for node in ordered_nodes:
        for nextnode in node.outgoing_nodes:
            if not nextnode.incoming_nodes:
                nextnode.incoming_nodes.append(node)
                node.outgoing_nodes.append(nextnode)

    return ordered_nodes
def topological_ordering(nodes):
    ordered_nodes = [node for node in nodes if not node.incoming_nodes]

    for node in ordered_nodes:
        for nextnode in node.outgoing_nodes:
            nextnode.incoming_nodes.remove(node)
            if not nextnode.incoming_nodes:
                ordered_nodes.append(nextnode)

    return ordered_nodes


class Node:
    def __init__(self, name):
        self.name = name
        self.incoming_nodes = []
        self.outgoing_nodes = []

    def add_incoming_node(self, node):
        self.incoming_nodes.append(node)

    def add_outcoming_nodedef topological_ordering(nodes):
    ordered_nodes = [node for node in nodes if not node.incoming_nodes]

    for node in ordered_nodes:
        for nextnode in node.outgoing_nodes:
            nextnode.incoming_nodes.remove(node)
            if not nextnode.incoming_nodes:
                ordered_nodes.append(nextnode)

    return ordered_nodes


class Node:
    def __init__(self, name):
        self.name = name
        self.incoming_nodes = []
        self.outgoing_nodes = []

    def add_incoming_node(self, node):
        self.incoming_nodes.append(node)

    def remove_incoming_nodedef topological_ordering(nodes):
    ordered_nodes = [node for node in nodes if not node.incoming_nodes]

    for node in ordered_nodes:
        for nextnode in node.outgoing_nodes:
            nextnode.incoming_nodes.remove(node)
            if not nextnode.incoming_nodes:
                ordered_nodes.append(nextnode)

    return ordered_nodes


class Node(object):
    def __init__(self, name):
        self.name = name
        self.incoming_nodes = []
        self.outgoing_nodes = []

    def __str__(self):
        return self.name

    def __repr__(self):
        return self.name

    def __def topological_ordering(nodes):
    ordered_nodes = [node for node in nodes if not node.incoming_nodes]

    for node in ordered_nodes:
        for nextnode in node.outgoing_nodes:
            nextnode.incoming_nodes.remove(node)
            if not nextnode.incoming_nodes:
                ordered_nodes.append(nextnode)

    return ordered_nodes


class Node(object):
    def __init__(self, name):
        self.name = name
        self.incoming_nodes = []
        self.outgoing_nodes = []

    def __str__(self):
        return self.name

    def __repr__(self):
        return self.name

    def adddef topological_ordering(nodes):
    ordered_nodes = [node for node in nodes if not node.incoming_nodes]

    for node in ordered_nodes:
        for nextnode in node.outgoing_nodes:
            nextnode.incoming_nodes.remove(node)
            if not nextnode.incoming_nodes:
                ordered_nodes.append(nextnode)

    return ordered_nodes


class Node:
    def __init__(self, name):
        self.name = name
        self.incoming_nodes = []
        self.outgoing_nodes = []

    def __str__(self):
        return self.name

    def __repr__(self):
        return self.name

    def __lt__