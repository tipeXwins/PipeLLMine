
def knapsack(capacity, items):
    from collections import defaultdict
    memo = defaultdict(int)

    for i in range(1, len(items) + 1):
        weight, value = items[i - 1]

        for j in range(1, capacity + 1):
            memo[i, j] = memo[i - 1, j]

            if j < weight:
                memo[i, j] = max(memo[i, j], memo[i - 1, j])
            else:
                memo[i, j] = max(memo[i, j], memo[i - 1, j - weight] + value)

    return memo[len(items), capacity]


if __name__ == '__main__':
    print(knapsack(10, [[1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]))
def knapsack(capacity, items):
    from collections import defaultdict
    memo = defaultdict(int)

    for i in range(1, len(items) + 1):
        weight, value = items[i - 1]

        for j in range(1, capacity + 1):
            memo[i, j] = memo[i - 1, j]

            if j < weight:
                memo[i, j] = max(memo[i, j], memo[i - 1, j])
            else:
                memo[i, j] = max(memo[i, j], memo[i - 1, j - weight] + value)

    return memo[len(items), capacity]


if __name__ == '__main__':
    print(knapsack(10, [[1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [
def knapsack(capacity, items):
    from collections import defaultdict
    memo = defaultdict(int)

    for i in range(1, len(items) + 1):
        weight, value = items[i - 1]

        for j in range(1, capacity + 1):
            memo[i, j] = memo[i - 1, j]

            if j < weight:
                memo[i, j] = max(memo[i, j], memo[i - 1, j])
            else:
                memo[i, j] = max(memo[i, j], memo[i - 1, j - weight] + value)

    return memo[len(items), capacity]


if __name__ == '__main__':
    print(knapsack(10, [[1, 1], [2, 1], [3, 1], [4, 1]]))
    print(kn
def knapsack(capacity, items):
    from collections import defaultdict
    memo = defaultdict(int)

    for i in range(1, len(items) + 1):
        weight, value = items[i - 1]

        for j in range(1, capacity + 1):
            memo[i, j] = memo[i - 1, j]

            if j < weight:
                memo[i, j] = max(memo[i, j], memo[i - 1, j])
            else:
                memo[i, j] = max(memo[i, j], memo[i - 1, j - weight] + value)

    return memo[len(items), capacity]


if __name__ == '__main__':
    print(knapsack(10, [[1, 1], [2, 1], [3, 1], [4, 1], [5, 1],

def knapsack(capacity, items):
    from collections import defaultdict
    memo = defaultdict(int)

    for i in range(1, len(items) + 1):
        weight, value = items[i - 1]

        for j in range(1, capacity + 1):
            memo[i, j] = memo[i - 1, j]

            if weight > j:
                memo[i, j] = max(memo[i, j], memo[i - 1, j])
            else:
                memo[i, j] = max(memo[i, j], memo[i - 1, j - weight] + value)

    return memo[len(items), capacity]


if __name__ == '__main__':
    print(knapsack(7, [(1, 3), (2, 5), (3, 7), (4, 9)]))
    print(kn
def knapsack(capacity, items):
    from collections import defaultdict
    memo = defaultdict(int)

    for i in range(1, len(items) + 1):
        weight, value = items[i - 1]

        for j in range(1, capacity + 1):
            memo[i, j] = memo[i - 1, j]

            if j < weight:
                memo[i, j] = max(memo[i, j], memo[i - 1, j])
            else:
                memo[i, j] = max(memo[i, j], memo[i - 1, j - weight] + value)

    return memo[len(items), capacity]


if __name__ == '__main__':
    print(knapsack(10, [[1, 1], [2, 1], [3, 1], [4, 1]]))

def knapsack(capacity, items):
    from collections import defaultdict
    memo = defaultdict(int)

    for i in range(1, len(items) + 1):
        weight, value = items[i - 1]

        for j in range(1, capacity + 1):
            memo[i, j] = memo[i - 1, j]

            if j < weight:
                memo[i, j] = max(memo[i, j], memo[i - 1, j])
            else:
                memo[i, j] = max(memo[i, j], memo[i - 1, j - weight] + value)

    return memo[len(items), capacity]


if __name__ == '__main__':
    print(knapsack(10, [[1, 1], [2, 1], [3, 1], [4, 1],
                        [5, 1
def knapsack(capacity, items):
    from collections import defaultdict
    memo = defaultdict(int)

    for i in range(1, len(items) + 1):
        weight, value = items[i - 1]

        for j in range(1, capacity + 1):
            memo[i, j] = memo[i - 1, j]

            if weight > j:
                memo[i, j] = max(memo[i, j], memo[i - 1, j])
            else:
                memo[i, j] = max(memo[i, j], memo[i - 1, j - weight] + value)

    return memo[len(items), capacity]


if __name__ == '__main__':
    print(knapsack(7, [(1, 3), (2, 5), (4, 7), (6, 9)]))
    print(kn
def knapsack(capacity, items):
    from collections import defaultdict
    memo = defaultdict(int)

    for i in range(1, len(items) + 1):
        weight, value = items[i - 1]

        for j in range(1, capacity + 1):
            memo[i, j] = memo[i - 1, j]

            if j < weight:
                memo[i, j] = max(memo[i, j], memo[i - 1, j])
            else:
                memo[i, j] = max(memo[i, j], memo[i - 1, j - weight] + value)

    return memo[len(items), capacity]


if __name__ == '__main__':
    print(knapsack(7, [(1, 3), (2, 5), (4, 7), (6, 9)]))
    print(kn
def knapsack(capacity, items):
    from collections import defaultdict
    memo = defaultdict(int)

    for i in range(1, len(items) + 1):
        weight, value = items[i - 1]

        for j in range(1, capacity + 1):
            memo[i, j] = memo[i - 1, j]

            if weight > j:
                memo[i, j] = max(memo[i, j], memo[i - 1, j])
            else:
                memo[i, j] = max(memo[i, j], memo[i - 1, j - weight] + value)

    return memo[len(items), capacity]


if __name__ == '__main__':
    print(knapsack(7, [(1, 3), (2, 5), (3, 7), (4, 9)]))
